
V1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001908  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000086  00802000  00001908  0000199c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000001d4  00802086  00802086  00001a22  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001a22  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001a54  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000298  00000000  00000000  00001a94  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004802  00000000  00000000  00001d2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f61  00000000  00000000  0000652e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001153  00000000  00000000  0000748f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000630  00000000  00000000  000085e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000024c0  00000000  00000000  00008c14  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001718  00000000  00000000  0000b0d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000308  00000000  00000000  0000c7ec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 00 01 	jmp	0x200	; 0x200 <__ctors_end>
       4:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
       8:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
       c:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
      10:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
      14:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
      18:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
      1c:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
      20:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
      24:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
      28:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
      2c:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
      30:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
      34:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
      38:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
      3c:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
      40:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
      44:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
      48:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
      4c:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
      50:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
      54:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
      58:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
      5c:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
      60:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
      64:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
      68:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
      6c:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
      70:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
      74:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
      78:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
      7c:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
      80:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
      84:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
      88:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
      8c:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
      90:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
      94:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
      98:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
      9c:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
      a0:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
      a4:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
      a8:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
      ac:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
      b0:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
      b4:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__vector_45>
      b8:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
      bc:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
      c0:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
      c4:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
      c8:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
      cc:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
      d0:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
      d4:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
      d8:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
      dc:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
      e0:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
      e4:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
      e8:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
      ec:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
      f0:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
      f4:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
      f8:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
      fc:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
     100:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
     104:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
     108:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
     10c:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
     110:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
     114:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
     118:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
     11c:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
     120:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
     124:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
     128:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
     12c:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
     130:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
     134:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
     138:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
     13c:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
     140:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
     144:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
     148:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
     14c:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
     150:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
     154:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
     158:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
     15c:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
     160:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
     164:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
     168:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
     16c:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
     170:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
     174:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
     178:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
     17c:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
     180:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
     184:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
     188:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
     18c:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
     190:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
     194:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
     198:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
     19c:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
     1a0:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
     1a4:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
     1a8:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
     1ac:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
     1b0:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
     1b4:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
     1b8:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
     1bc:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
     1c0:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
     1c4:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
     1c8:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
     1cc:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
     1d0:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
     1d4:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
     1d8:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
     1dc:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
     1e0:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
     1e4:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
     1e8:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
     1ec:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
     1f0:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
     1f4:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
     1f8:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>

000001fc <__trampolines_start>:
     1fc:	0c 94 23 01 	jmp	0x246	; 0x246 <TWIC_SlaveProcessData>

00000200 <__ctors_end>:
     200:	11 24       	eor	r1, r1
     202:	1f be       	out	0x3f, r1	; 63
     204:	cf ef       	ldi	r28, 0xFF	; 255
     206:	cd bf       	out	0x3d, r28	; 61
     208:	df e5       	ldi	r29, 0x5F	; 95
     20a:	de bf       	out	0x3e, r29	; 62
     20c:	00 e0       	ldi	r16, 0x00	; 0
     20e:	0c bf       	out	0x3c, r16	; 60

00000210 <__do_copy_data>:
     210:	10 e2       	ldi	r17, 0x20	; 32
     212:	a0 e0       	ldi	r26, 0x00	; 0
     214:	b0 e2       	ldi	r27, 0x20	; 32
     216:	e8 e0       	ldi	r30, 0x08	; 8
     218:	f9 e1       	ldi	r31, 0x19	; 25
     21a:	00 e0       	ldi	r16, 0x00	; 0
     21c:	0b bf       	out	0x3b, r16	; 59
     21e:	02 c0       	rjmp	.+4      	; 0x224 <__do_copy_data+0x14>
     220:	07 90       	elpm	r0, Z+
     222:	0d 92       	st	X+, r0
     224:	a6 38       	cpi	r26, 0x86	; 134
     226:	b1 07       	cpc	r27, r17
     228:	d9 f7       	brne	.-10     	; 0x220 <__do_copy_data+0x10>

0000022a <__do_clear_bss>:
     22a:	22 e2       	ldi	r18, 0x22	; 34
     22c:	a6 e8       	ldi	r26, 0x86	; 134
     22e:	b0 e2       	ldi	r27, 0x20	; 32
     230:	01 c0       	rjmp	.+2      	; 0x234 <.do_clear_bss_start>

00000232 <.do_clear_bss_loop>:
     232:	1d 92       	st	X+, r1

00000234 <.do_clear_bss_start>:
     234:	aa 35       	cpi	r26, 0x5A	; 90
     236:	b2 07       	cpc	r27, r18
     238:	e1 f7       	brne	.-8      	; 0x232 <.do_clear_bss_loop>
     23a:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <main>
     23e:	0c 94 82 0c 	jmp	0x1904	; 0x1904 <_exit>

00000242 <__bad_interrupt>:
     242:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000246 <TWIC_SlaveProcessData>:

//This is what happens whenever a new byte is received 
static void TWIC_SlaveProcessData(void)
{
	//PORTD.OUT = twiSlave.receivedData[twiSlave.bytesReceived];
	queue_enQueue(twiSlave.receivedData[twiSlave.bytesReceived]);
     246:	e0 91 55 22 	lds	r30, 0x2255
     24a:	f0 e0       	ldi	r31, 0x00	; 0
     24c:	eb 5c       	subi	r30, 0xCB	; 203
     24e:	fd 4d       	sbci	r31, 0xDD	; 221
     250:	84 81       	ldd	r24, Z+4	; 0x04
 ********************/

//Places data at head, increments head
static void queue_enQueue(uint8_t data)
{
	byteQueue.dataArray[byteQueue.head] = data;
     252:	aa e8       	ldi	r26, 0x8A	; 138
     254:	b1 e2       	ldi	r27, 0x21	; 33
     256:	ec 91       	ld	r30, X
     258:	f0 e0       	ldi	r31, 0x00	; 0
     25a:	e6 57       	subi	r30, 0x76	; 118
     25c:	fe 4d       	sbci	r31, 0xDE	; 222
     25e:	83 83       	std	Z+3, r24	; 0x03
	byteQueue.head++;
     260:	8c 91       	ld	r24, X
     262:	8f 5f       	subi	r24, 0xFF	; 255
     264:	8c 93       	st	X, r24
	if(byteQueue.head == BYTE_ARRAY_SIZE)
     266:	8c 91       	ld	r24, X
     268:	80 34       	cpi	r24, 0x40	; 64
     26a:	11 f4       	brne	.+4      	; 0x270 <TWIC_SlaveProcessData+0x2a>
	{
		byteQueue.head = 0;
     26c:	10 92 8a 21 	sts	0x218A, r1
	}

	if(byteQueue.numData < BYTE_ARRAY_SIZE)
     270:	80 91 8c 21 	lds	r24, 0x218C
     274:	80 34       	cpi	r24, 0x40	; 64
     276:	30 f4       	brcc	.+12     	; 0x284 <TWIC_SlaveProcessData+0x3e>
	{
		byteQueue.numData++;
     278:	ea e8       	ldi	r30, 0x8A	; 138
     27a:	f1 e2       	ldi	r31, 0x21	; 33
     27c:	82 81       	ldd	r24, Z+2	; 0x02
     27e:	8f 5f       	subi	r24, 0xFF	; 255
     280:	82 83       	std	Z+2, r24	; 0x02
     282:	08 95       	ret
	}
	else
	{
		byteQueue.overflowFlag = 1;
     284:	ea e8       	ldi	r30, 0x8A	; 138
     286:	f1 e2       	ldi	r31, 0x21	; 33
     288:	81 e0       	ldi	r24, 0x01	; 1
     28a:	80 93 cd 21 	sts	0x21CD, r24
		byteQueue.tail++;
     28e:	81 81       	ldd	r24, Z+1	; 0x01
     290:	8f 5f       	subi	r24, 0xFF	; 255
     292:	81 83       	std	Z+1, r24	; 0x01
		if(byteQueue.tail == BYTE_ARRAY_SIZE)
     294:	81 81       	ldd	r24, Z+1	; 0x01
     296:	80 34       	cpi	r24, 0x40	; 64
     298:	11 f4       	brne	.+4      	; 0x29e <TWIC_SlaveProcessData+0x58>
		{
			byteQueue.tail = 0;
     29a:	10 92 8b 21 	sts	0x218B, r1
     29e:	08 95       	ret

000002a0 <byteQueue_deQueue>:


//Returns data at tail, increments tail
static uint8_t byteQueue_deQueue()
{
	if(byteQueue.numData == 0)
     2a0:	80 91 8c 21 	lds	r24, 0x218C
     2a4:	88 23       	and	r24, r24
     2a6:	99 f0       	breq	.+38     	; 0x2ce <byteQueue_deQueue+0x2e>
	{
		return 0;
	}
	byteQueue.numData--;
     2a8:	ea e8       	ldi	r30, 0x8A	; 138
     2aa:	f1 e2       	ldi	r31, 0x21	; 33
     2ac:	82 81       	ldd	r24, Z+2	; 0x02
     2ae:	81 50       	subi	r24, 0x01	; 1
     2b0:	82 83       	std	Z+2, r24	; 0x02

	uint8_t dataToReturn = byteQueue.dataArray[byteQueue.tail];
     2b2:	a1 81       	ldd	r26, Z+1	; 0x01
     2b4:	b0 e0       	ldi	r27, 0x00	; 0
     2b6:	a6 57       	subi	r26, 0x76	; 118
     2b8:	be 4d       	sbci	r27, 0xDE	; 222
     2ba:	13 96       	adiw	r26, 0x03	; 3
     2bc:	8c 91       	ld	r24, X
	byteQueue.tail++;
     2be:	91 81       	ldd	r25, Z+1	; 0x01
     2c0:	9f 5f       	subi	r25, 0xFF	; 255
     2c2:	91 83       	std	Z+1, r25	; 0x01
	if(byteQueue.tail == BYTE_ARRAY_SIZE)
     2c4:	91 81       	ldd	r25, Z+1	; 0x01
     2c6:	90 34       	cpi	r25, 0x40	; 64
     2c8:	11 f4       	brne	.+4      	; 0x2ce <byteQueue_deQueue+0x2e>
	{
		byteQueue.tail = 0;
     2ca:	10 92 8b 21 	sts	0x218B, r1
	}

	return dataToReturn;
}
     2ce:	08 95       	ret

000002d0 <__vector_45>:
static volatile struct queueData byteQueue;
static struct packetQueueData packetQueue;

// TWIE Slave Interrupt vector.
ISR(TWIE_TWIS_vect)
{
     2d0:	1f 92       	push	r1
     2d2:	0f 92       	push	r0
     2d4:	0f b6       	in	r0, 0x3f	; 63
     2d6:	0f 92       	push	r0
     2d8:	11 24       	eor	r1, r1
     2da:	0b b6       	in	r0, 0x3b	; 59
     2dc:	0f 92       	push	r0
     2de:	2f 93       	push	r18
     2e0:	3f 93       	push	r19
     2e2:	4f 93       	push	r20
     2e4:	5f 93       	push	r21
     2e6:	6f 93       	push	r22
     2e8:	7f 93       	push	r23
     2ea:	8f 93       	push	r24
     2ec:	9f 93       	push	r25
     2ee:	af 93       	push	r26
     2f0:	bf 93       	push	r27
     2f2:	ef 93       	push	r30
     2f4:	ff 93       	push	r31
	TWI_SlaveInterruptHandler(&twiSlave);
     2f6:	85 e3       	ldi	r24, 0x35	; 53
     2f8:	92 e2       	ldi	r25, 0x22	; 34
     2fa:	0e 94 a2 06 	call	0xd44	; 0xd44 <TWI_SlaveInterruptHandler>
}
     2fe:	ff 91       	pop	r31
     300:	ef 91       	pop	r30
     302:	bf 91       	pop	r27
     304:	af 91       	pop	r26
     306:	9f 91       	pop	r25
     308:	8f 91       	pop	r24
     30a:	7f 91       	pop	r23
     30c:	6f 91       	pop	r22
     30e:	5f 91       	pop	r21
     310:	4f 91       	pop	r20
     312:	3f 91       	pop	r19
     314:	2f 91       	pop	r18
     316:	0f 90       	pop	r0
     318:	0b be       	out	0x3b, r0	; 59
     31a:	0f 90       	pop	r0
     31c:	0f be       	out	0x3f, r0	; 63
     31e:	0f 90       	pop	r0
     320:	1f 90       	pop	r1
     322:	18 95       	reti

00000324 <i2cAPI_init>:
/************************
 * Non-static functions *
 ************************/

void i2cAPI_init(uint8_t addressP)
{
     324:	cf 93       	push	r28
     326:	c8 2f       	mov	r28, r24
	//Initialize TWI slave on Port E
	TWI_SlaveInitializeDriver(&twiSlave, &TWIE, TWIC_SlaveProcessData);
     328:	43 e2       	ldi	r20, 0x23	; 35
     32a:	51 e0       	ldi	r21, 0x01	; 1
     32c:	60 ea       	ldi	r22, 0xA0	; 160
     32e:	74 e0       	ldi	r23, 0x04	; 4
     330:	85 e3       	ldi	r24, 0x35	; 53
     332:	92 e2       	ldi	r25, 0x22	; 34
     334:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <TWI_SlaveInitializeDriver>
	TWI_SlaveInitializeModule(&twiSlave, addressP, TWI_SLAVE_INTLVL_LO_gc);
     338:	40 e4       	ldi	r20, 0x40	; 64
     33a:	6c 2f       	mov	r22, r28
     33c:	85 e3       	ldi	r24, 0x35	; 53
     33e:	92 e2       	ldi	r25, 0x22	; 34
     340:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <TWI_SlaveInitializeModule>
}
     344:	cf 91       	pop	r28
     346:	08 95       	ret

00000348 <i2cAPI_checkForPackets>:

void i2cAPI_checkForPackets()
{
     348:	5f 92       	push	r5
     34a:	6f 92       	push	r6
     34c:	7f 92       	push	r7
     34e:	8f 92       	push	r8
     350:	9f 92       	push	r9
     352:	af 92       	push	r10
     354:	bf 92       	push	r11
     356:	cf 92       	push	r12
     358:	df 92       	push	r13
     35a:	ef 92       	push	r14
     35c:	ff 92       	push	r15
     35e:	0f 93       	push	r16
     360:	1f 93       	push	r17
     362:	cf 93       	push	r28
     364:	df 93       	push	r29
     366:	cd b7       	in	r28, 0x3d	; 61
     368:	de b7       	in	r29, 0x3e	; 62
     36a:	64 97       	sbiw	r28, 0x14	; 20
     36c:	cd bf       	out	0x3d, r28	; 61
     36e:	de bf       	out	0x3e, r29	; 62
}

//returns how many items are in the queue
static volatile uint8_t i2c_hasData()
{
	return byteQueue.numData;
     370:	80 91 8c 21 	lds	r24, 0x218C

void i2cAPI_checkForPackets()
{
	//uint8_t pathTrace = 0;
	//uint8_t timedOut = 0;
	if(i2c_hasData())
     374:	88 23       	and	r24, r24
     376:	09 f4       	brne	.+2      	; 0x37a <i2cAPI_checkForPackets+0x32>
     378:	f7 c0       	rjmp	.+494    	; 0x568 <i2cAPI_checkForPackets+0x220>
     37a:	fe 01       	movw	r30, r28
     37c:	31 96       	adiw	r30, 0x01	; 1
     37e:	ce 01       	movw	r24, r28
     380:	45 96       	adiw	r24, 0x15	; 21
		//pathTrace++;
		uint8_t success = 0;
		uint8_t receiveArray[RECEIVE_ARRAY_SIZE];
		for(int i = 0; i < RECEIVE_ARRAY_SIZE; i++)
		{
			receiveArray[i] = 0x00;
     382:	11 92       	st	Z+, r1
	if(i2c_hasData())
	{
		//pathTrace++;
		uint8_t success = 0;
		uint8_t receiveArray[RECEIVE_ARRAY_SIZE];
		for(int i = 0; i < RECEIVE_ARRAY_SIZE; i++)
     384:	e8 17       	cp	r30, r24
     386:	f9 07       	cpc	r31, r25
     388:	e1 f7       	brne	.-8      	; 0x382 <i2cAPI_checkForPackets+0x3a>
}

//returns how many items are in the queue
static volatile uint8_t i2c_hasData()
{
	return byteQueue.numData;
     38a:	80 91 8c 21 	lds	r24, 0x218C
		uint8_t receiveArray[RECEIVE_ARRAY_SIZE];
		for(int i = 0; i < RECEIVE_ARRAY_SIZE; i++)
		{
			receiveArray[i] = 0x00;
		}
		while(i2c_hasData() && (receiveArray[0] != START) )
     38e:	88 23       	and	r24, r24
     390:	09 f4       	brne	.+2      	; 0x394 <i2cAPI_checkForPackets+0x4c>
     392:	d4 c0       	rjmp	.+424    	; 0x53c <i2cAPI_checkForPackets+0x1f4>
     394:	89 81       	ldd	r24, Y+1	; 0x01
     396:	8b 3a       	cpi	r24, 0xAB	; 171
     398:	69 f0       	breq	.+26     	; 0x3b4 <i2cAPI_checkForPackets+0x6c>
}

//returns how many items are in the queue
static volatile uint8_t i2c_hasData()
{
	return byteQueue.numData;
     39a:	0a e8       	ldi	r16, 0x8A	; 138
     39c:	11 e2       	ldi	r17, 0x21	; 33
	return dataToReturn;
}

static uint8_t i2c_getByte()
{
	return byteQueue_deQueue();
     39e:	0e 94 50 01 	call	0x2a0	; 0x2a0 <byteQueue_deQueue>
		{
			receiveArray[i] = 0x00;
		}
		while(i2c_hasData() && (receiveArray[0] != START) )
		{
			receiveArray[0] = i2c_getByte();
     3a2:	89 83       	std	Y+1, r24	; 0x01
}

//returns how many items are in the queue
static volatile uint8_t i2c_hasData()
{
	return byteQueue.numData;
     3a4:	d8 01       	movw	r26, r16
     3a6:	12 96       	adiw	r26, 0x02	; 2
     3a8:	9c 91       	ld	r25, X
		uint8_t receiveArray[RECEIVE_ARRAY_SIZE];
		for(int i = 0; i < RECEIVE_ARRAY_SIZE; i++)
		{
			receiveArray[i] = 0x00;
		}
		while(i2c_hasData() && (receiveArray[0] != START) )
     3aa:	99 23       	and	r25, r25
     3ac:	09 f4       	brne	.+2      	; 0x3b0 <i2cAPI_checkForPackets+0x68>
     3ae:	c6 c0       	rjmp	.+396    	; 0x53c <i2cAPI_checkForPackets+0x1f4>
     3b0:	8b 3a       	cpi	r24, 0xAB	; 171
     3b2:	a9 f7       	brne	.-22     	; 0x39e <i2cAPI_checkForPackets+0x56>

static uint8_t i2c_GetByteWithTimeout(uint8_t *destination, uint8_t timeout_ms)
{
	while (timeout_ms != 0)
	{
		if(byteQueue.numData)
     3b4:	80 91 8c 21 	lds	r24, 0x218C
     3b8:	88 23       	and	r24, r24
     3ba:	09 f4       	brne	.+2      	; 0x3be <i2cAPI_checkForPackets+0x76>
     3bc:	cb c0       	rjmp	.+406    	; 0x554 <i2cAPI_checkForPackets+0x20c>
     3be:	03 c0       	rjmp	.+6      	; 0x3c6 <i2cAPI_checkForPackets+0x7e>
     3c0:	92 81       	ldd	r25, Z+2	; 0x02
     3c2:	99 23       	and	r25, r25
     3c4:	41 f0       	breq	.+16     	; 0x3d6 <i2cAPI_checkForPackets+0x8e>
		{
			*destination = byteQueue_deQueue();
     3c6:	0e 94 50 01 	call	0x2a0	; 0x2a0 <byteQueue_deQueue>
     3ca:	58 2e       	mov	r5, r24
			//pathTrace++;
			uint8_t length;
			if(i2c_GetByteWithTimeout(&length, 10))
			{
				//pathTrace++;
				receiveArray[1] = length;
     3cc:	8a 83       	std	Y+2, r24	; 0x02
				if(length <= ( RECEIVE_ARRAY_SIZE-2 ) )
     3ce:	b2 e1       	ldi	r27, 0x12	; 18
     3d0:	b8 17       	cp	r27, r24
     3d2:	50 f4       	brcc	.+20     	; 0x3e8 <i2cAPI_checkForPackets+0xa0>
     3d4:	ab c0       	rjmp	.+342    	; 0x52c <i2cAPI_checkForPackets+0x1e4>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3d6:	a3 ef       	ldi	r26, 0xF3	; 243
     3d8:	b1 e0       	ldi	r27, 0x01	; 1
     3da:	11 97       	sbiw	r26, 0x01	; 1
     3dc:	f1 f7       	brne	.-4      	; 0x3da <i2cAPI_checkForPackets+0x92>
     3de:	00 c0       	rjmp	.+0      	; 0x3e0 <i2cAPI_checkForPackets+0x98>
     3e0:	00 00       	nop
     3e2:	81 50       	subi	r24, 0x01	; 1
//	packetQueue.overflowFlag = 0;
//}

static uint8_t i2c_GetByteWithTimeout(uint8_t *destination, uint8_t timeout_ms)
{
	while (timeout_ms != 0)
     3e4:	69 f7       	brne	.-38     	; 0x3c0 <i2cAPI_checkForPackets+0x78>
     3e6:	a2 c0       	rjmp	.+324    	; 0x52c <i2cAPI_checkForPackets+0x1e4>
				receiveArray[1] = length;
				if(length <= ( RECEIVE_ARRAY_SIZE-2 ) )
				{
					//pathTrace++;
					int i;
					for(i = 2; i < length+2; i++)
     3e8:	88 2e       	mov	r8, r24
     3ea:	91 2c       	mov	r9, r1
     3ec:	34 01       	movw	r6, r8
     3ee:	b2 e0       	ldi	r27, 0x02	; 2
     3f0:	6b 0e       	add	r6, r27
     3f2:	71 1c       	adc	r7, r1
     3f4:	e3 e0       	ldi	r30, 0x03	; 3
     3f6:	6e 16       	cp	r6, r30
     3f8:	71 04       	cpc	r7, r1
     3fa:	04 f5       	brge	.+64     	; 0x43c <i2cAPI_checkForPackets+0xf4>
     3fc:	68 94       	set
     3fe:	ee 24       	eor	r14, r14
     400:	e1 f8       	bld	r14, 1
     402:	f1 2c       	mov	r15, r1
     404:	31 c0       	rjmp	.+98     	; 0x468 <i2cAPI_checkForPackets+0x120>

static uint8_t i2c_GetByteWithTimeout(uint8_t *destination, uint8_t timeout_ms)
{
	while (timeout_ms != 0)
	{
		if(byteQueue.numData)
     406:	d8 01       	movw	r26, r16
     408:	12 96       	adiw	r26, 0x02	; 2
     40a:	2c 91       	ld	r18, X
     40c:	22 23       	and	r18, r18
     40e:	69 f0       	breq	.+26     	; 0x42a <i2cAPI_checkForPackets+0xe2>
		{
			*destination = byteQueue_deQueue();
     410:	0e 94 50 01 	call	0x2a0	; 0x2a0 <byteQueue_deQueue>
     414:	f6 01       	movw	r30, r12
     416:	81 93       	st	Z+, r24
     418:	6f 01       	movw	r12, r30
				receiveArray[1] = length;
				if(length <= ( RECEIVE_ARRAY_SIZE-2 ) )
				{
					//pathTrace++;
					int i;
					for(i = 2; i < length+2; i++)
     41a:	ff ef       	ldi	r31, 0xFF	; 255
     41c:	ef 1a       	sub	r14, r31
     41e:	ff 0a       	sbc	r15, r31
     420:	ea 14       	cp	r14, r10
     422:	fb 04       	cpc	r15, r11
     424:	d1 f4       	brne	.+52     	; 0x45a <i2cAPI_checkForPackets+0x112>
     426:	75 01       	movw	r14, r10
     428:	1f c0       	rjmp	.+62     	; 0x468 <i2cAPI_checkForPackets+0x120>
     42a:	a3 ef       	ldi	r26, 0xF3	; 243
     42c:	b1 e0       	ldi	r27, 0x01	; 1
     42e:	11 97       	sbiw	r26, 0x01	; 1
     430:	f1 f7       	brne	.-4      	; 0x42e <i2cAPI_checkForPackets+0xe6>
     432:	00 c0       	rjmp	.+0      	; 0x434 <i2cAPI_checkForPackets+0xec>
     434:	00 00       	nop
     436:	91 50       	subi	r25, 0x01	; 1
//	packetQueue.overflowFlag = 0;
//}

static uint8_t i2c_GetByteWithTimeout(uint8_t *destination, uint8_t timeout_ms)
{
	while (timeout_ms != 0)
     438:	31 f7       	brne	.-52     	; 0x406 <i2cAPI_checkForPackets+0xbe>
     43a:	16 c0       	rjmp	.+44     	; 0x468 <i2cAPI_checkForPackets+0x120>
     43c:	6e 01       	movw	r12, r28
     43e:	b3 e0       	ldi	r27, 0x03	; 3
     440:	cb 0e       	add	r12, r27
     442:	d1 1c       	adc	r13, r1
     444:	a8 2e       	mov	r10, r24
     446:	b1 2c       	mov	r11, r1
     448:	e2 e0       	ldi	r30, 0x02	; 2
     44a:	ae 0e       	add	r10, r30
     44c:	b1 1c       	adc	r11, r1
				receiveArray[1] = length;
				if(length <= ( RECEIVE_ARRAY_SIZE-2 ) )
				{
					//pathTrace++;
					int i;
					for(i = 2; i < length+2; i++)
     44e:	68 94       	set
     450:	ee 24       	eor	r14, r14
     452:	e1 f8       	bld	r14, 1
     454:	f1 2c       	mov	r15, r1

static uint8_t i2c_GetByteWithTimeout(uint8_t *destination, uint8_t timeout_ms)
{
	while (timeout_ms != 0)
	{
		if(byteQueue.numData)
     456:	0a e8       	ldi	r16, 0x8A	; 138
     458:	11 e2       	ldi	r17, 0x21	; 33
     45a:	d8 01       	movw	r26, r16
     45c:	12 96       	adiw	r26, 0x02	; 2
     45e:	9c 91       	ld	r25, X
     460:	99 23       	and	r25, r25
     462:	09 f4       	brne	.+2      	; 0x466 <i2cAPI_checkForPackets+0x11e>
     464:	6f c0       	rjmp	.+222    	; 0x544 <i2cAPI_checkForPackets+0x1fc>
     466:	d4 cf       	rjmp	.-88     	; 0x410 <i2cAPI_checkForPackets+0xc8>
							//Timed out!
							//timedOut = 1;
							break;
						}
					}
					if(i == length+2)
     468:	6e 14       	cp	r6, r14
     46a:	7f 04       	cpc	r7, r15
     46c:	09 f0       	breq	.+2      	; 0x470 <i2cAPI_checkForPackets+0x128>
     46e:	5e c0       	rjmp	.+188    	; 0x52c <i2cAPI_checkForPackets+0x1e4>
					{
						//pathTrace++;
						if(receiveArray[length+1] == STOP)
     470:	fe 01       	movw	r30, r28
     472:	e8 0d       	add	r30, r8
     474:	f9 1d       	adc	r31, r9
     476:	82 81       	ldd	r24, Z+2	; 0x02
     478:	8d 3c       	cpi	r24, 0xCD	; 205
     47a:	09 f0       	breq	.+2      	; 0x47e <i2cAPI_checkForPackets+0x136>
     47c:	57 c0       	rjmp	.+174    	; 0x52c <i2cAPI_checkForPackets+0x1e4>
						{
							//pathTrace++;
							//Calculate parity
							uint8_t parityByte = 0;
							for(int j = 1; j < length; j++)
     47e:	b2 e0       	ldi	r27, 0x02	; 2
     480:	8b 16       	cp	r8, r27
     482:	91 04       	cpc	r9, r1
     484:	7c f0       	brlt	.+30     	; 0x4a4 <i2cAPI_checkForPackets+0x15c>
     486:	fe 01       	movw	r30, r28
     488:	32 96       	adiw	r30, 0x02	; 2
     48a:	21 e0       	ldi	r18, 0x01	; 1
     48c:	30 e0       	ldi	r19, 0x00	; 0
     48e:	2c 0f       	add	r18, r28
     490:	3d 1f       	adc	r19, r29
     492:	25 0d       	add	r18, r5
     494:	31 1d       	adc	r19, r1
     496:	80 e0       	ldi	r24, 0x00	; 0
							{
								parityByte ^= receiveArray[j];
     498:	91 91       	ld	r25, Z+
     49a:	89 27       	eor	r24, r25
						if(receiveArray[length+1] == STOP)
						{
							//pathTrace++;
							//Calculate parity
							uint8_t parityByte = 0;
							for(int j = 1; j < length; j++)
     49c:	e2 17       	cp	r30, r18
     49e:	f3 07       	cpc	r31, r19
     4a0:	d9 f7       	brne	.-10     	; 0x498 <i2cAPI_checkForPackets+0x150>
     4a2:	01 c0       	rjmp	.+2      	; 0x4a6 <i2cAPI_checkForPackets+0x15e>
     4a4:	80 e0       	ldi	r24, 0x00	; 0
							{
								parityByte ^= receiveArray[j];
							}

							if(parityByte == receiveArray[length])
     4a6:	fe 01       	movw	r30, r28
     4a8:	e8 0d       	add	r30, r8
     4aa:	f9 1d       	adc	r31, r9
     4ac:	91 81       	ldd	r25, Z+1	; 0x01
     4ae:	98 13       	cpse	r25, r24
     4b0:	3d c0       	rjmp	.+122    	; 0x52c <i2cAPI_checkForPackets+0x1e4>
							{
								//Packet is good!
								success = 1;
								packetQueue.packetArray[packetQueue.head].cmd = receiveArray[2];
     4b2:	20 91 86 20 	lds	r18, 0x2086
     4b6:	30 e1       	ldi	r19, 0x10	; 16
     4b8:	23 9f       	mul	r18, r19
     4ba:	f0 01       	movw	r30, r0
     4bc:	11 24       	eor	r1, r1
     4be:	ea 57       	subi	r30, 0x7A	; 122
     4c0:	ff 4d       	sbci	r31, 0xDF	; 223
     4c2:	8b 81       	ldd	r24, Y+3	; 0x03
     4c4:	83 83       	std	Z+3, r24	; 0x03

								for(int i = 3; i < length; i++)
     4c6:	84 e0       	ldi	r24, 0x04	; 4
     4c8:	88 16       	cp	r8, r24
     4ca:	91 04       	cpc	r9, r1
     4cc:	9c f0       	brlt	.+38     	; 0x4f4 <i2cAPI_checkForPackets+0x1ac>
     4ce:	de 01       	movw	r26, r28
     4d0:	14 96       	adiw	r26, 0x04	; 4
     4d2:	e0 e1       	ldi	r30, 0x10	; 16
     4d4:	2e 9f       	mul	r18, r30
     4d6:	c0 01       	movw	r24, r0
     4d8:	11 24       	eor	r1, r1
     4da:	fc 01       	movw	r30, r24
     4dc:	e6 57       	subi	r30, 0x76	; 118
     4de:	ff 4d       	sbci	r31, 0xDF	; 223
     4e0:	01 96       	adiw	r24, 0x01	; 1
     4e2:	85 0d       	add	r24, r5
     4e4:	91 1d       	adc	r25, r1
     4e6:	8a 57       	subi	r24, 0x7A	; 122
     4e8:	9f 4d       	sbci	r25, 0xDF	; 223
								{
									packetQueue.packetArray[packetQueue.head].buffer[i-3] = receiveArray[i];
     4ea:	3d 91       	ld	r19, X+
     4ec:	31 93       	st	Z+, r19
							{
								//Packet is good!
								success = 1;
								packetQueue.packetArray[packetQueue.head].cmd = receiveArray[2];

								for(int i = 3; i < length; i++)
     4ee:	e8 17       	cp	r30, r24
     4f0:	f9 07       	cpc	r31, r25
     4f2:	d9 f7       	brne	.-10     	; 0x4ea <i2cAPI_checkForPackets+0x1a2>
								{
									packetQueue.packetArray[packetQueue.head].buffer[i-3] = receiveArray[i];
								}

								packetQueue.head++;
     4f4:	2f 5f       	subi	r18, 0xFF	; 255
     4f6:	20 93 86 20 	sts	0x2086, r18
								if(packetQueue.head == PACKET_ARRAY_SIZE)
     4fa:	20 31       	cpi	r18, 0x10	; 16
     4fc:	11 f4       	brne	.+4      	; 0x502 <i2cAPI_checkForPackets+0x1ba>
								{
									packetQueue.head = 0;
     4fe:	10 92 86 20 	sts	0x2086, r1
								}

								if(packetQueue.numData < PACKET_ARRAY_SIZE)
     502:	80 91 88 20 	lds	r24, 0x2088
     506:	80 31       	cpi	r24, 0x10	; 16
     508:	20 f4       	brcc	.+8      	; 0x512 <i2cAPI_checkForPackets+0x1ca>
								{
									packetQueue.numData++;
     50a:	8f 5f       	subi	r24, 0xFF	; 255
     50c:	80 93 88 20 	sts	0x2088, r24
     510:	2b c0       	rjmp	.+86     	; 0x568 <i2cAPI_checkForPackets+0x220>
								}
								else
								{
									packetQueue.overflowFlag = 1;
     512:	e6 e8       	ldi	r30, 0x86	; 134
     514:	f0 e2       	ldi	r31, 0x20	; 32
     516:	81 e0       	ldi	r24, 0x01	; 1
     518:	80 93 89 21 	sts	0x2189, r24
									packetQueue.tail++;
     51c:	81 81       	ldd	r24, Z+1	; 0x01
     51e:	8f 5f       	subi	r24, 0xFF	; 255
     520:	81 83       	std	Z+1, r24	; 0x01
									if(packetQueue.tail == PACKET_ARRAY_SIZE)
     522:	80 31       	cpi	r24, 0x10	; 16
     524:	09 f5       	brne	.+66     	; 0x568 <i2cAPI_checkForPackets+0x220>
									{
										packetQueue.tail = 0;
     526:	10 92 87 20 	sts	0x2087, r1
     52a:	1e c0       	rjmp	.+60     	; 0x568 <i2cAPI_checkForPackets+0x220>
}

static void byteQueue_flushQueue()
{
	//Re-Initialize byteQueueVariables
	byteQueue.head = 0;
     52c:	ea e8       	ldi	r30, 0x8A	; 138
     52e:	f1 e2       	ldi	r31, 0x21	; 33
     530:	10 82       	st	Z, r1
	byteQueue.tail = 0;
     532:	11 82       	std	Z+1, r1	; 0x01
	byteQueue.numData = 0;
     534:	12 82       	std	Z+2, r1	; 0x02
	byteQueue.overflowFlag = 0;
     536:	10 92 cd 21 	sts	0x21CD, r1
     53a:	16 c0       	rjmp	.+44     	; 0x568 <i2cAPI_checkForPackets+0x220>
		}
		while(i2c_hasData() && (receiveArray[0] != START) )
		{
			receiveArray[0] = i2c_getByte();
		}
		if(receiveArray[0] == START)
     53c:	89 81       	ldd	r24, Y+1	; 0x01
     53e:	8b 3a       	cpi	r24, 0xAB	; 171
     540:	a9 f7       	brne	.-22     	; 0x52c <i2cAPI_checkForPackets+0x1e4>
     542:	38 cf       	rjmp	.-400    	; 0x3b4 <i2cAPI_checkForPackets+0x6c>
     544:	83 ef       	ldi	r24, 0xF3	; 243
     546:	91 e0       	ldi	r25, 0x01	; 1
     548:	01 97       	sbiw	r24, 0x01	; 1
     54a:	f1 f7       	brne	.-4      	; 0x548 <i2cAPI_checkForPackets+0x200>
     54c:	00 c0       	rjmp	.+0      	; 0x54e <i2cAPI_checkForPackets+0x206>
     54e:	00 00       	nop
     550:	99 e0       	ldi	r25, 0x09	; 9
     552:	59 cf       	rjmp	.-334    	; 0x406 <i2cAPI_checkForPackets+0xbe>
     554:	a3 ef       	ldi	r26, 0xF3	; 243
     556:	b1 e0       	ldi	r27, 0x01	; 1
     558:	11 97       	sbiw	r26, 0x01	; 1
     55a:	f1 f7       	brne	.-4      	; 0x558 <i2cAPI_checkForPackets+0x210>
     55c:	00 c0       	rjmp	.+0      	; 0x55e <i2cAPI_checkForPackets+0x216>
     55e:	00 00       	nop
     560:	89 e0       	ldi	r24, 0x09	; 9

static uint8_t i2c_GetByteWithTimeout(uint8_t *destination, uint8_t timeout_ms)
{
	while (timeout_ms != 0)
	{
		if(byteQueue.numData)
     562:	ea e8       	ldi	r30, 0x8A	; 138
     564:	f1 e2       	ldi	r31, 0x21	; 33
     566:	2c cf       	rjmp	.-424    	; 0x3c0 <i2cAPI_checkForPackets+0x78>
		if(!success)
		{
			byteQueue_flushQueue();
		}
	}
}
     568:	64 96       	adiw	r28, 0x14	; 20
     56a:	cd bf       	out	0x3d, r28	; 61
     56c:	de bf       	out	0x3e, r29	; 62
     56e:	df 91       	pop	r29
     570:	cf 91       	pop	r28
     572:	1f 91       	pop	r17
     574:	0f 91       	pop	r16
     576:	ff 90       	pop	r15
     578:	ef 90       	pop	r14
     57a:	df 90       	pop	r13
     57c:	cf 90       	pop	r12
     57e:	bf 90       	pop	r11
     580:	af 90       	pop	r10
     582:	9f 90       	pop	r9
     584:	8f 90       	pop	r8
     586:	7f 90       	pop	r7
     588:	6f 90       	pop	r6
     58a:	5f 90       	pop	r5
     58c:	08 95       	ret

0000058e <i2cAPI_hasPacket>:

uint8_t i2cAPI_hasPacket()
{
	return packetQueue.numData;
}
     58e:	80 91 88 20 	lds	r24, 0x2088
     592:	08 95       	ret

00000594 <i2cAPI_getPacket>:

uint8_t i2cAPI_getPacket(struct packet *packetDestination)
{
     594:	cf 93       	push	r28
     596:	df 93       	push	r29
     598:	dc 01       	movw	r26, r24
	if(packetQueue.numData == 0)
     59a:	80 91 88 20 	lds	r24, 0x2088
     59e:	88 23       	and	r24, r24
     5a0:	e9 f0       	breq	.+58     	; 0x5dc <i2cAPI_getPacket+0x48>
	{
		return 0;
	}

	*packetDestination = packetQueue.packetArray[packetQueue.tail];
     5a2:	c6 e8       	ldi	r28, 0x86	; 134
     5a4:	d0 e2       	ldi	r29, 0x20	; 32
     5a6:	e9 81       	ldd	r30, Y+1	; 0x01
     5a8:	80 e1       	ldi	r24, 0x10	; 16
     5aa:	e8 9f       	mul	r30, r24
     5ac:	f0 01       	movw	r30, r0
     5ae:	11 24       	eor	r1, r1
     5b0:	e7 57       	subi	r30, 0x77	; 119
     5b2:	ff 4d       	sbci	r31, 0xDF	; 223
     5b4:	90 e1       	ldi	r25, 0x10	; 16
     5b6:	01 90       	ld	r0, Z+
     5b8:	0d 92       	st	X+, r0
     5ba:	9a 95       	dec	r25
     5bc:	e1 f7       	brne	.-8      	; 0x5b6 <i2cAPI_getPacket+0x22>

	packetQueue.tail++;
     5be:	89 81       	ldd	r24, Y+1	; 0x01
     5c0:	8f 5f       	subi	r24, 0xFF	; 255
	if(packetQueue.tail == PACKET_ARRAY_SIZE)
     5c2:	80 31       	cpi	r24, 0x10	; 16
     5c4:	19 f0       	breq	.+6      	; 0x5cc <i2cAPI_getPacket+0x38>
		return 0;
	}

	*packetDestination = packetQueue.packetArray[packetQueue.tail];

	packetQueue.tail++;
     5c6:	80 93 87 20 	sts	0x2087, r24
     5ca:	02 c0       	rjmp	.+4      	; 0x5d0 <i2cAPI_getPacket+0x3c>
	if(packetQueue.tail == PACKET_ARRAY_SIZE)
	{
		packetQueue.tail = 0;
     5cc:	10 92 87 20 	sts	0x2087, r1
	}
	packetQueue.numData--;
     5d0:	e6 e8       	ldi	r30, 0x86	; 134
     5d2:	f0 e2       	ldi	r31, 0x20	; 32
     5d4:	82 81       	ldd	r24, Z+2	; 0x02
     5d6:	81 50       	subi	r24, 0x01	; 1
     5d8:	82 83       	std	Z+2, r24	; 0x02
	return 1;
     5da:	81 e0       	ldi	r24, 0x01	; 1
}
     5dc:	df 91       	pop	r29
     5de:	cf 91       	pop	r28
     5e0:	08 95       	ret

000005e2 <i2cAPI_setReturnPacket>:

void i2cAPI_setReturnPacket(const struct packet * const packetPointer, uint8_t numDataBytes)
{
     5e2:	dc 01       	movw	r26, r24
	twiSlave.sendData[0] = START;
     5e4:	e5 e3       	ldi	r30, 0x35	; 53
     5e6:	f2 e2       	ldi	r31, 0x22	; 34
     5e8:	8b ea       	ldi	r24, 0xAB	; 171
     5ea:	84 87       	std	Z+12, r24	; 0x0c
	twiSlave.sendData[1] = numDataBytes+3;
     5ec:	83 e0       	ldi	r24, 0x03	; 3
     5ee:	86 0f       	add	r24, r22
     5f0:	85 87       	std	Z+13, r24	; 0x0d
	twiSlave.sendData[2] = packetPointer->cmd;
     5f2:	8c 91       	ld	r24, X
     5f4:	86 87       	std	Z+14, r24	; 0x0e
	uint8_t i;
	for(i = 3; i < numDataBytes+3; i++)
     5f6:	70 e0       	ldi	r23, 0x00	; 0
     5f8:	6d 5f       	subi	r22, 0xFD	; 253
     5fa:	7f 4f       	sbci	r23, 0xFF	; 255
     5fc:	64 30       	cpi	r22, 0x04	; 4
     5fe:	71 05       	cpc	r23, r1
     600:	8c f1       	brlt	.+98     	; 0x664 <i2cAPI_setReturnPacket+0x82>
     602:	23 e0       	ldi	r18, 0x03	; 3
     604:	30 e0       	ldi	r19, 0x00	; 0
     606:	93 e0       	ldi	r25, 0x03	; 3
	{
		twiSlave.sendData[i] = packetPointer->buffer[i-3];
     608:	fd 01       	movw	r30, r26
     60a:	e2 0f       	add	r30, r18
     60c:	f3 1f       	adc	r31, r19
     60e:	32 97       	sbiw	r30, 0x02	; 2
     610:	40 81       	ld	r20, Z
     612:	f9 01       	movw	r30, r18
     614:	eb 5c       	subi	r30, 0xCB	; 203
     616:	fd 4d       	sbci	r31, 0xDD	; 221
     618:	44 87       	std	Z+12, r20	; 0x0c
{
	twiSlave.sendData[0] = START;
	twiSlave.sendData[1] = numDataBytes+3;
	twiSlave.sendData[2] = packetPointer->cmd;
	uint8_t i;
	for(i = 3; i < numDataBytes+3; i++)
     61a:	9f 5f       	subi	r25, 0xFF	; 255
     61c:	29 2f       	mov	r18, r25
     61e:	30 e0       	ldi	r19, 0x00	; 0
     620:	26 17       	cp	r18, r22
     622:	37 07       	cpc	r19, r23
     624:	8c f3       	brlt	.-30     	; 0x608 <i2cAPI_setReturnPacket+0x26>
     626:	15 c0       	rjmp	.+42     	; 0x652 <i2cAPI_setReturnPacket+0x70>
	uint8_t parityByte = 0;
	parityByte ^= twiSlave.sendData[1];
	parityByte ^= twiSlave.sendData[2];
	for(i = 3; i < numDataBytes+3; i++)
	{
		parityByte ^= twiSlave.sendData[i];
     628:	fc 01       	movw	r30, r24
     62a:	eb 5c       	subi	r30, 0xCB	; 203
     62c:	fd 4d       	sbci	r31, 0xDD	; 221
     62e:	84 85       	ldd	r24, Z+12	; 0x0c
     630:	38 27       	eor	r19, r24
	}

	uint8_t parityByte = 0;
	parityByte ^= twiSlave.sendData[1];
	parityByte ^= twiSlave.sendData[2];
	for(i = 3; i < numDataBytes+3; i++)
     632:	2f 5f       	subi	r18, 0xFF	; 255
     634:	82 2f       	mov	r24, r18
     636:	90 e0       	ldi	r25, 0x00	; 0
     638:	86 17       	cp	r24, r22
     63a:	97 07       	cpc	r25, r23
     63c:	ac f3       	brlt	.-22     	; 0x628 <i2cAPI_setReturnPacket+0x46>
	{
		parityByte ^= twiSlave.sendData[i];
	}

	twiSlave.sendData[i] = parityByte;
     63e:	fc 01       	movw	r30, r24
     640:	eb 5c       	subi	r30, 0xCB	; 203
     642:	fd 4d       	sbci	r31, 0xDD	; 221
     644:	34 87       	std	Z+12, r19	; 0x0c
	twiSlave.sendData[i+1] = STOP;
     646:	fc 01       	movw	r30, r24
     648:	ea 5c       	subi	r30, 0xCA	; 202
     64a:	fd 4d       	sbci	r31, 0xDD	; 221
     64c:	2d ec       	ldi	r18, 0xCD	; 205
     64e:	24 87       	std	Z+12, r18	; 0x0c
     650:	08 95       	ret
	{
		twiSlave.sendData[i] = packetPointer->buffer[i-3];
	}

	uint8_t parityByte = 0;
	parityByte ^= twiSlave.sendData[1];
     652:	e5 e3       	ldi	r30, 0x35	; 53
     654:	f2 e2       	ldi	r31, 0x22	; 34
     656:	85 85       	ldd	r24, Z+13	; 0x0d
	parityByte ^= twiSlave.sendData[2];
     658:	36 85       	ldd	r19, Z+14	; 0x0e
     65a:	38 27       	eor	r19, r24
     65c:	83 e0       	ldi	r24, 0x03	; 3
     65e:	90 e0       	ldi	r25, 0x00	; 0
     660:	23 e0       	ldi	r18, 0x03	; 3
     662:	e2 cf       	rjmp	.-60     	; 0x628 <i2cAPI_setReturnPacket+0x46>
	{
		twiSlave.sendData[i] = packetPointer->buffer[i-3];
	}

	uint8_t parityByte = 0;
	parityByte ^= twiSlave.sendData[1];
     664:	e5 e3       	ldi	r30, 0x35	; 53
     666:	f2 e2       	ldi	r31, 0x22	; 34
     668:	85 85       	ldd	r24, Z+13	; 0x0d
	parityByte ^= twiSlave.sendData[2];
     66a:	36 85       	ldd	r19, Z+14	; 0x0e
     66c:	38 27       	eor	r19, r24
	for(i = 3; i < numDataBytes+3; i++)
     66e:	83 e0       	ldi	r24, 0x03	; 3
     670:	90 e0       	ldi	r25, 0x00	; 0
     672:	e5 cf       	rjmp	.-54     	; 0x63e <i2cAPI_setReturnPacket+0x5c>

00000674 <i2cAPI_resetIfBusHogging>:
	twiSlave.sendData[i] = parityByte;
	twiSlave.sendData[i+1] = STOP;
}

void i2cAPI_resetIfBusHogging()
{
     674:	0f 93       	push	r16
     676:	cf 93       	push	r28
     678:	df 93       	push	r29
     67a:	1f 92       	push	r1
     67c:	cd b7       	in	r28, 0x3d	; 61
     67e:	de b7       	in	r29, 0x3e	; 62
	uint16_t us_countdown = 1000;
	while( (us_countdown != 0) && !(PORTE.IN & PIN0_bm) )
     680:	80 91 88 06 	lds	r24, 0x0688
     684:	80 ff       	sbrs	r24, 0
     686:	19 c0       	rjmp	.+50     	; 0x6ba <i2cAPI_resetIfBusHogging+0x46>
     688:	1e c0       	rjmp	.+60     	; 0x6c6 <i2cAPI_resetIfBusHogging+0x52>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     68a:	00 c0       	rjmp	.+0      	; 0x68c <i2cAPI_resetIfBusHogging+0x18>
     68c:	01 97       	sbiw	r24, 0x01	; 1
     68e:	29 f0       	breq	.+10     	; 0x69a <i2cAPI_resetIfBusHogging+0x26>
     690:	20 85       	ldd	r18, Z+8	; 0x08
     692:	20 ff       	sbrs	r18, 0
     694:	fa cf       	rjmp	.-12     	; 0x68a <i2cAPI_resetIfBusHogging+0x16>
     696:	17 c0       	rjmp	.+46     	; 0x6c6 <i2cAPI_resetIfBusHogging+0x52>
	}
	if(us_countdown == 0)
	{
		//reset our shit
		CCPWrite(&RST.CTRL, RST_SWRST_bm);
		while(1){}
     698:	ff cf       	rjmp	.-2      	; 0x698 <i2cAPI_resetIfBusHogging+0x24>
	// Restore global interrupt setting from scratch register.
	asm("out  0x3F, R1");

	#elif defined __GNUC__
	//AVR_ENTER_CRITICAL_REGION( );
	uint8_t volatile saved_sreg = SREG;
     69a:	8f b7       	in	r24, 0x3f	; 63
     69c:	89 83       	std	Y+1, r24	; 0x01
	SREG &= ~((uint8_t)CPU_I_bm);
     69e:	8f b7       	in	r24, 0x3f	; 63
     6a0:	8f 77       	andi	r24, 0x7F	; 127
     6a2:	8f bf       	out	0x3f, r24	; 63
	//cli();
	volatile uint8_t * tmpAddr = address;
	#ifdef RAMPZ
	RAMPZ = 0;
     6a4:	1b be       	out	0x3b, r1	; 59
	#endif
	asm volatile(
     6a6:	21 e0       	ldi	r18, 0x01	; 1
     6a8:	89 e7       	ldi	r24, 0x79	; 121
     6aa:	90 e0       	ldi	r25, 0x00	; 0
     6ac:	fc 01       	movw	r30, r24
     6ae:	08 ed       	ldi	r16, 0xD8	; 216
     6b0:	04 bf       	out	0x34, r16	; 52
     6b2:	20 83       	st	Z, r18
	: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
	: "r16", "r30", "r31"
	);

	//AVR_LEAVE_CRITICAL_REGION( );
	SREG = saved_sreg;
     6b4:	89 81       	ldd	r24, Y+1	; 0x01
     6b6:	8f bf       	out	0x3f, r24	; 63
     6b8:	ef cf       	rjmp	.-34     	; 0x698 <i2cAPI_resetIfBusHogging+0x24>
     6ba:	00 c0       	rjmp	.+0      	; 0x6bc <i2cAPI_resetIfBusHogging+0x48>
     6bc:	87 ee       	ldi	r24, 0xE7	; 231
     6be:	93 e0       	ldi	r25, 0x03	; 3
}

void i2cAPI_resetIfBusHogging()
{
	uint16_t us_countdown = 1000;
	while( (us_countdown != 0) && !(PORTE.IN & PIN0_bm) )
     6c0:	e0 e8       	ldi	r30, 0x80	; 128
     6c2:	f6 e0       	ldi	r31, 0x06	; 6
     6c4:	e5 cf       	rjmp	.-54     	; 0x690 <i2cAPI_resetIfBusHogging+0x1c>
	{
		//reset our shit
		CCPWrite(&RST.CTRL, RST_SWRST_bm);
		while(1){}
	}
     6c6:	0f 90       	pop	r0
     6c8:	df 91       	pop	r29
     6ca:	cf 91       	pop	r28
     6cc:	0f 91       	pop	r16
     6ce:	08 95       	ret

000006d0 <idHeader_init>:
#include <avr/io.h>
#include "idHeader.h"

void idHeader_init()
{
	PORTF.DIRCLR = 0x1F;
     6d0:	e0 ea       	ldi	r30, 0xA0	; 160
     6d2:	f6 e0       	ldi	r31, 0x06	; 6
     6d4:	8f e1       	ldi	r24, 0x1F	; 31
     6d6:	82 83       	std	Z+2, r24	; 0x02
	//Setting pins 0-5 as totemPoll pullup
	PORTCFG.MPCMASK |= 0x1F;
     6d8:	a0 eb       	ldi	r26, 0xB0	; 176
     6da:	b0 e0       	ldi	r27, 0x00	; 0
     6dc:	8c 91       	ld	r24, X
     6de:	8f 61       	ori	r24, 0x1F	; 31
     6e0:	8c 93       	st	X, r24
	PORTF.PIN0CTRL = PORT_OPC_PULLUP_gc;
     6e2:	88 e1       	ldi	r24, 0x18	; 24
     6e4:	80 8b       	std	Z+16, r24	; 0x10
     6e6:	08 95       	ret

000006e8 <idHeader_getValue>:
}

uint8_t idHeader_getValue()
{
	uint8_t headerVal = (~PORTF.IN) & 0x1F;
     6e8:	80 91 a8 06 	lds	r24, 0x06A8
     6ec:	80 95       	com	r24
	return headerVal;
     6ee:	8f 71       	andi	r24, 0x1F	; 31
     6f0:	08 95       	ret

000006f2 <led_init>:
PB2 - CMD
 */

void led_init()
{
	PORTA.OUTSET = 0xFF;
     6f2:	e0 e0       	ldi	r30, 0x00	; 0
     6f4:	f6 e0       	ldi	r31, 0x06	; 6
     6f6:	8f ef       	ldi	r24, 0xFF	; 255
     6f8:	85 83       	std	Z+5, r24	; 0x05
	PORTA.DIRSET = 0xFF;
     6fa:	81 83       	std	Z+1, r24	; 0x01

	PORTB.OUTSET = 0x07;
     6fc:	e0 e2       	ldi	r30, 0x20	; 32
     6fe:	f6 e0       	ldi	r31, 0x06	; 6
     700:	87 e0       	ldi	r24, 0x07	; 7
     702:	85 83       	std	Z+5, r24	; 0x05
	PORTB.DIRSET = 0x07;
     704:	81 83       	std	Z+1, r24	; 0x01
     706:	08 95       	ret

00000708 <led_cmdOn>:
}

void led_cmdOn()
{
	PORTB.OUTCLR = CMD_MASK;
     708:	84 e0       	ldi	r24, 0x04	; 4
     70a:	80 93 26 06 	sts	0x0626, r24
     70e:	08 95       	ret

00000710 <led_cmdOff>:
}
void led_cmdOff()
{
	PORTB.OUTSET = CMD_MASK;
     710:	84 e0       	ldi	r24, 0x04	; 4
     712:	80 93 25 06 	sts	0x0625, r24
     716:	08 95       	ret

00000718 <led_pingOn>:
	PORTB.OUTTGL = CMD_MASK;
}

void led_pingOn()
{
	PORTB.OUTCLR = PING_MASK;
     718:	82 e0       	ldi	r24, 0x02	; 2
     71a:	80 93 26 06 	sts	0x0626, r24
     71e:	08 95       	ret

00000720 <led_pingOff>:
}
void led_pingOff()
{
	PORTB.OUTSET = PING_MASK;
     720:	82 e0       	ldi	r24, 0x02	; 2
     722:	80 93 25 06 	sts	0x0625, r24
     726:	08 95       	ret

00000728 <led_aliveToggle>:
{
	PORTB.OUTSET = ALIVE_MASK;
}
void led_aliveToggle()
{
	PORTB.OUTTGL = ALIVE_MASK;
     728:	81 e0       	ldi	r24, 0x01	; 1
     72a:	80 93 27 06 	sts	0x0627, r24
     72e:	08 95       	ret

00000730 <led_dataOut>:
}

void led_dataOut(uint8_t value)
{
	PORTA.OUT = ~value;
     730:	80 95       	com	r24
     732:	80 93 04 06 	sts	0x0604, r24
     736:	08 95       	ret

00000738 <limitSwitch_init>:
 * PE7	SW_B1
 */

void limitSwitch_init()
{
	PORTE.DIRCLR = 0xF0;
     738:	e0 e8       	ldi	r30, 0x80	; 128
     73a:	f6 e0       	ldi	r31, 0x06	; 6
     73c:	80 ef       	ldi	r24, 0xF0	; 240
     73e:	82 83       	std	Z+2, r24	; 0x02
	//Setting Pins 4-7 as totemPoll pullup
	PORTCFG.MPCMASK |= 0xF0;
     740:	a0 eb       	ldi	r26, 0xB0	; 176
     742:	b0 e0       	ldi	r27, 0x00	; 0
     744:	8c 91       	ld	r24, X
     746:	80 6f       	ori	r24, 0xF0	; 240
     748:	8c 93       	st	X, r24
	PORTE.PIN0CTRL = PORT_OPC_PULLUP_gc;
     74a:	88 e1       	ldi	r24, 0x18	; 24
     74c:	80 8b       	std	Z+16, r24	; 0x10
     74e:	08 95       	ret

00000750 <atLimitA0>:
}

uint8_t atLimitA0()
{
	return (~PORTE.IN) & PIN4_bm;
     750:	80 91 88 06 	lds	r24, 0x0688
     754:	80 95       	com	r24
}
     756:	80 71       	andi	r24, 0x10	; 16
     758:	08 95       	ret

0000075a <atLimitB0>:
uint8_t atLimitB0()
{
	return (~PORTE.IN) & PIN5_bm;
     75a:	80 91 88 06 	lds	r24, 0x0688
     75e:	80 95       	com	r24
}
     760:	80 72       	andi	r24, 0x20	; 32
     762:	08 95       	ret

00000764 <atLimitA1>:

uint8_t atLimitA1()
{
	return (~PORTE.IN) & PIN6_bm;
     764:	80 91 88 06 	lds	r24, 0x0688
     768:	80 95       	com	r24
}
     76a:	80 74       	andi	r24, 0x40	; 64
     76c:	08 95       	ret

0000076e <atLimitB1>:
uint8_t atLimitB1()
{
	return (~PORTE.IN) & PIN7_bm;
     76e:	80 91 88 06 	lds	r24, 0x0688
     772:	80 95       	com	r24
}
     774:	80 78       	andi	r24, 0x80	; 128
     776:	08 95       	ret

00000778 <motor_init>:
/* Uses TimerC0 and TimerD0
 */
void motor_init()
{
	//Initializing Motor0
	PORTC.DIRSET = 0x0F;
     778:	5f e0       	ldi	r21, 0x0F	; 15
     77a:	50 93 41 06 	sts	0x0641, r21
	TCC0.CTRLB = TC_WGMODE_DS_T_gc; //Chose 'top' arbitrarily
     77e:	e0 e0       	ldi	r30, 0x00	; 0
     780:	f8 e0       	ldi	r31, 0x08	; 8
     782:	45 e0       	ldi	r20, 0x05	; 5
     784:	41 83       	std	Z+1, r20	; 0x01
	TCC0.CTRLB |= TC0_CCBEN_bm | TC0_CCDEN_bm;
     786:	81 81       	ldd	r24, Z+1	; 0x01
     788:	80 6a       	ori	r24, 0xA0	; 160
     78a:	81 83       	std	Z+1, r24	; 0x01
	TCC0.PER = 0x0FFF; //Using 12 bits
     78c:	2f ef       	ldi	r18, 0xFF	; 255
     78e:	3f e0       	ldi	r19, 0x0F	; 15
     790:	26 a3       	std	Z+38, r18	; 0x26
     792:	37 a3       	std	Z+39, r19	; 0x27
	TCC0.CTRLA = TC_CLKSEL_DIV1_gc;
     794:	91 e0       	ldi	r25, 0x01	; 1
     796:	90 83       	st	Z, r25

	//Initializing Motor1
	PORTD.DIRSET = 0x0F;
     798:	50 93 61 06 	sts	0x0661, r21
	TCD0.CTRLB = TC_WGMODE_DS_T_gc;
     79c:	e0 e0       	ldi	r30, 0x00	; 0
     79e:	f9 e0       	ldi	r31, 0x09	; 9
     7a0:	41 83       	std	Z+1, r20	; 0x01
	TCD0.CTRLB |= TC0_CCBEN_bm | TC0_CCDEN_bm;
     7a2:	81 81       	ldd	r24, Z+1	; 0x01
     7a4:	80 6a       	ori	r24, 0xA0	; 160
     7a6:	81 83       	std	Z+1, r24	; 0x01
	TCD0.PER = 0x0FFF; //Using 12 bits
     7a8:	26 a3       	std	Z+38, r18	; 0x26
     7aa:	37 a3       	std	Z+39, r19	; 0x27
	TCD0.CTRLA = TC_CLKSEL_DIV1_gc;
     7ac:	90 83       	st	Z, r25
     7ae:	08 95       	ret

000007b0 <motor0_set>:
void motor0_set(int16_t value,  uint8_t stopBehavior)
{
	static uint8_t lastDir = PHASE_A;
	uint8_t smoothStop = 0;
	uint8_t brakeStop = 0;
	if(value == 0)
     7b0:	00 97       	sbiw	r24, 0x00	; 0
     7b2:	09 f0       	breq	.+2      	; 0x7b6 <motor0_set+0x6>
     7b4:	5d c0       	rjmp	.+186    	; 0x870 <motor0_set+0xc0>
	{
		if(stopBehavior == STOP_SMOOTH)
     7b6:	61 30       	cpi	r22, 0x01	; 1
     7b8:	a1 f0       	breq	.+40     	; 0x7e2 <motor0_set+0x32>
		else if(stopBehavior == STOP_BRAKE)
		{
			brakeStop = 1;
		}
	}
	if(brakeStop)
     7ba:	62 30       	cpi	r22, 0x02	; 2
     7bc:	a9 f5       	brne	.+106    	; 0x828 <motor0_set+0x78>
	{
		PORTC.OUTCLR = PIN2_bm | PIN0_bm; //Disable BHI and BHI
     7be:	85 e0       	ldi	r24, 0x05	; 5
     7c0:	80 93 46 06 	sts	0x0646, r24

		TCC0.CCB = TCC0.PER;	//Hold ALO HIGH
     7c4:	e0 e0       	ldi	r30, 0x00	; 0
     7c6:	f8 e0       	ldi	r31, 0x08	; 8
     7c8:	86 a1       	ldd	r24, Z+38	; 0x26
     7ca:	97 a1       	ldd	r25, Z+39	; 0x27
     7cc:	82 a7       	std	Z+42, r24	; 0x2a
     7ce:	93 a7       	std	Z+43, r25	; 0x2b
		TCC0.CCD = TCC0.PER;	//Hold BLO HIGH
     7d0:	86 a1       	ldd	r24, Z+38	; 0x26
     7d2:	97 a1       	ldd	r25, Z+39	; 0x27
     7d4:	86 a7       	std	Z+46, r24	; 0x2e
     7d6:	97 a7       	std	Z+47, r25	; 0x2f
		TCC0.CNT = TCC0.PER;
     7d8:	86 a1       	ldd	r24, Z+38	; 0x26
     7da:	97 a1       	ldd	r25, Z+39	; 0x27
     7dc:	80 a3       	std	Z+32, r24	; 0x20
     7de:	91 a3       	std	Z+33, r25	; 0x21
     7e0:	08 95       	ret
	}
	else if(value > 0 || (smoothStop && (lastDir == PHASE_A))  )
     7e2:	20 91 cf 21 	lds	r18, 0x21CF
     7e6:	21 11       	cpse	r18, r1
     7e8:	1f c0       	rjmp	.+62     	; 0x828 <motor0_set+0x78>
	{
		//Commanded Phase A
		lastDir = PHASE_A;
     7ea:	10 92 cf 21 	sts	0x21CF, r1
		if(value > 4095)
		{
			value = 4095;
		}

		PORTC.OUTCLR = PIN2_bm; //Disable BHI
     7ee:	24 e0       	ldi	r18, 0x04	; 4
     7f0:	20 93 46 06 	sts	0x0646, r18
		TCC0.CCB = 0;			//Hold ALO low
     7f4:	e0 e0       	ldi	r30, 0x00	; 0
     7f6:	f8 e0       	ldi	r31, 0x08	; 8
     7f8:	12 a6       	std	Z+42, r1	; 0x2a
     7fa:	13 a6       	std	Z+43, r1	; 0x2b
		TCC0.CNT = TCC0.PER;
     7fc:	26 a1       	ldd	r18, Z+38	; 0x26
     7fe:	37 a1       	ldd	r19, Z+39	; 0x27
     800:	20 a3       	std	Z+32, r18	; 0x20
     802:	31 a3       	std	Z+33, r19	; 0x21
     804:	81 15       	cp	r24, r1
     806:	20 e1       	ldi	r18, 0x10	; 16
     808:	92 07       	cpc	r25, r18
     80a:	14 f0       	brlt	.+4      	; 0x810 <motor0_set+0x60>
     80c:	8f ef       	ldi	r24, 0xFF	; 255
     80e:	9f e0       	ldi	r25, 0x0F	; 15

		uint16_t pwmVal = (uint16_t)value;
		TCC0.CCD = pwmVal;		//Set BLO pwm
     810:	e0 e0       	ldi	r30, 0x00	; 0
     812:	f8 e0       	ldi	r31, 0x08	; 8
     814:	86 a7       	std	Z+46, r24	; 0x2e
     816:	97 a7       	std	Z+47, r25	; 0x2f
		TCC0.CNT = TCC0.PER;
     818:	86 a1       	ldd	r24, Z+38	; 0x26
     81a:	97 a1       	ldd	r25, Z+39	; 0x27
     81c:	80 a3       	std	Z+32, r24	; 0x20
     81e:	91 a3       	std	Z+33, r25	; 0x21
		PORTC.OUTSET = PIN0_bm; //Set AHI
     820:	81 e0       	ldi	r24, 0x01	; 1
     822:	80 93 45 06 	sts	0x0645, r24
		TCC0.CCB = TCC0.PER;	//Hold ALO HIGH
		TCC0.CCD = TCC0.PER;	//Hold BLO HIGH
		TCC0.CNT = TCC0.PER;
	}
	else if(value > 0 || (smoothStop && (lastDir == PHASE_A))  )
	{
     826:	08 95       	ret
		PORTC.OUTSET = PIN0_bm; //Set AHI
	}
	else
	{
		//Commanded Phase B
		lastDir = PHASE_B;
     828:	21 e0       	ldi	r18, 0x01	; 1
     82a:	20 93 cf 21 	sts	0x21CF, r18
     82e:	81 30       	cpi	r24, 0x01	; 1
     830:	20 ef       	ldi	r18, 0xF0	; 240
     832:	92 07       	cpc	r25, r18
     834:	14 f4       	brge	.+4      	; 0x83a <motor0_set+0x8a>
     836:	81 e0       	ldi	r24, 0x01	; 1
     838:	90 ef       	ldi	r25, 0xF0	; 240
		{
			value = -4095;
		}
		value*=-1;

		PORTC.OUTCLR = PIN0_bm;	//Clear AHI
     83a:	a0 e4       	ldi	r26, 0x40	; 64
     83c:	b6 e0       	ldi	r27, 0x06	; 6
     83e:	21 e0       	ldi	r18, 0x01	; 1
     840:	16 96       	adiw	r26, 0x06	; 6
     842:	2c 93       	st	X, r18
     844:	16 97       	sbiw	r26, 0x06	; 6
		TCC0.CCD = 0;			//Hold BLO low
     846:	e0 e0       	ldi	r30, 0x00	; 0
     848:	f8 e0       	ldi	r31, 0x08	; 8
     84a:	16 a6       	std	Z+46, r1	; 0x2e
     84c:	17 a6       	std	Z+47, r1	; 0x2f
		TCC0.CNT = TCC0.PER;
     84e:	26 a1       	ldd	r18, Z+38	; 0x26
     850:	37 a1       	ldd	r19, Z+39	; 0x27
     852:	20 a3       	std	Z+32, r18	; 0x20
     854:	31 a3       	std	Z+33, r19	; 0x21
		lastDir = PHASE_B;
		if(value < -4095)
		{
			value = -4095;
		}
		value*=-1;
     856:	91 95       	neg	r25
     858:	81 95       	neg	r24
     85a:	91 09       	sbc	r25, r1
		PORTC.OUTCLR = PIN0_bm;	//Clear AHI
		TCC0.CCD = 0;			//Hold BLO low
		TCC0.CNT = TCC0.PER;

		uint16_t pwmVal = (uint16_t)value;
		TCC0.CCB = pwmVal;		//Set ALO pwm
     85c:	82 a7       	std	Z+42, r24	; 0x2a
     85e:	93 a7       	std	Z+43, r25	; 0x2b
		TCC0.CNT = TCC0.PER;
     860:	86 a1       	ldd	r24, Z+38	; 0x26
     862:	97 a1       	ldd	r25, Z+39	; 0x27
     864:	80 a3       	std	Z+32, r24	; 0x20
     866:	91 a3       	std	Z+33, r25	; 0x21
		PORTC.OUTSET = PIN2_bm;
     868:	84 e0       	ldi	r24, 0x04	; 4
     86a:	15 96       	adiw	r26, 0x05	; 5
     86c:	8c 93       	st	X, r24
     86e:	08 95       	ret

		TCC0.CCB = TCC0.PER;	//Hold ALO HIGH
		TCC0.CCD = TCC0.PER;	//Hold BLO HIGH
		TCC0.CNT = TCC0.PER;
	}
	else if(value > 0 || (smoothStop && (lastDir == PHASE_A))  )
     870:	18 16       	cp	r1, r24
     872:	19 06       	cpc	r1, r25
     874:	0c f4       	brge	.+2      	; 0x878 <motor0_set+0xc8>
     876:	b9 cf       	rjmp	.-142    	; 0x7ea <motor0_set+0x3a>
     878:	d7 cf       	rjmp	.-82     	; 0x828 <motor0_set+0x78>

0000087a <motor1_set>:
void motor1_set(int16_t value, uint8_t stopBehavior)
{
	static uint8_t lastDir = PHASE_A;
	uint8_t smoothStop = 0;
	uint8_t brakeStop = 0;
	if(value == 0)
     87a:	00 97       	sbiw	r24, 0x00	; 0
     87c:	09 f0       	breq	.+2      	; 0x880 <motor1_set+0x6>
     87e:	5d c0       	rjmp	.+186    	; 0x93a <motor1_set+0xc0>
	{
		if(stopBehavior == STOP_SMOOTH)
     880:	61 30       	cpi	r22, 0x01	; 1
     882:	a1 f0       	breq	.+40     	; 0x8ac <motor1_set+0x32>
		{
			brakeStop = 1;
		}
	}

	if(brakeStop)
     884:	62 30       	cpi	r22, 0x02	; 2
     886:	a9 f5       	brne	.+106    	; 0x8f2 <motor1_set+0x78>
	{
		PORTD.OUTCLR = PIN2_bm | PIN0_bm; //Disable BHI and AHI
     888:	85 e0       	ldi	r24, 0x05	; 5
     88a:	80 93 66 06 	sts	0x0666, r24

		TCD0.CCB = TCD0.PER;		//Hold ALO high
     88e:	e0 e0       	ldi	r30, 0x00	; 0
     890:	f9 e0       	ldi	r31, 0x09	; 9
     892:	86 a1       	ldd	r24, Z+38	; 0x26
     894:	97 a1       	ldd	r25, Z+39	; 0x27
     896:	82 a7       	std	Z+42, r24	; 0x2a
     898:	93 a7       	std	Z+43, r25	; 0x2b
		TCD0.CCD = TCD0.PER;		//Hold BLO high
     89a:	86 a1       	ldd	r24, Z+38	; 0x26
     89c:	97 a1       	ldd	r25, Z+39	; 0x27
     89e:	86 a7       	std	Z+46, r24	; 0x2e
     8a0:	97 a7       	std	Z+47, r25	; 0x2f
		TCD0.CNT = TCD0.PER;
     8a2:	86 a1       	ldd	r24, Z+38	; 0x26
     8a4:	97 a1       	ldd	r25, Z+39	; 0x27
     8a6:	80 a3       	std	Z+32, r24	; 0x20
     8a8:	91 a3       	std	Z+33, r25	; 0x21
     8aa:	08 95       	ret
	}
	else if(value > 0 || (smoothStop && (lastDir == PHASE_A))  )
     8ac:	20 91 ce 21 	lds	r18, 0x21CE
     8b0:	21 11       	cpse	r18, r1
     8b2:	1f c0       	rjmp	.+62     	; 0x8f2 <motor1_set+0x78>
	{
		//Commanded Phase A
		lastDir = PHASE_A;
     8b4:	10 92 ce 21 	sts	0x21CE, r1
		if(value > 4095)
		{
			value = 4095;
		}
		PORTD.OUTCLR = PIN2_bm; //Disable BHI
     8b8:	24 e0       	ldi	r18, 0x04	; 4
     8ba:	20 93 66 06 	sts	0x0666, r18
		TCD0.CCB = 0;			//Hold ALO low
     8be:	e0 e0       	ldi	r30, 0x00	; 0
     8c0:	f9 e0       	ldi	r31, 0x09	; 9
     8c2:	12 a6       	std	Z+42, r1	; 0x2a
     8c4:	13 a6       	std	Z+43, r1	; 0x2b
		TCD0.CNT = TCD0.PER;
     8c6:	26 a1       	ldd	r18, Z+38	; 0x26
     8c8:	37 a1       	ldd	r19, Z+39	; 0x27
     8ca:	20 a3       	std	Z+32, r18	; 0x20
     8cc:	31 a3       	std	Z+33, r19	; 0x21
     8ce:	81 15       	cp	r24, r1
     8d0:	20 e1       	ldi	r18, 0x10	; 16
     8d2:	92 07       	cpc	r25, r18
     8d4:	14 f0       	brlt	.+4      	; 0x8da <motor1_set+0x60>
     8d6:	8f ef       	ldi	r24, 0xFF	; 255
     8d8:	9f e0       	ldi	r25, 0x0F	; 15

		uint16_t pwmVal = (uint16_t)value;
		TCD0.CCD = pwmVal;		//Set BLO pwm
     8da:	e0 e0       	ldi	r30, 0x00	; 0
     8dc:	f9 e0       	ldi	r31, 0x09	; 9
     8de:	86 a7       	std	Z+46, r24	; 0x2e
     8e0:	97 a7       	std	Z+47, r25	; 0x2f
		TCD0.CNT = TCD0.PER;
     8e2:	86 a1       	ldd	r24, Z+38	; 0x26
     8e4:	97 a1       	ldd	r25, Z+39	; 0x27
     8e6:	80 a3       	std	Z+32, r24	; 0x20
     8e8:	91 a3       	std	Z+33, r25	; 0x21
		PORTD.OUTSET = PIN0_bm; //Set AHI
     8ea:	81 e0       	ldi	r24, 0x01	; 1
     8ec:	80 93 65 06 	sts	0x0665, r24
		TCD0.CCB = TCD0.PER;		//Hold ALO high
		TCD0.CCD = TCD0.PER;		//Hold BLO high
		TCD0.CNT = TCD0.PER;
	}
	else if(value > 0 || (smoothStop && (lastDir == PHASE_A))  )
	{
     8f0:	08 95       	ret
		PORTD.OUTSET = PIN0_bm; //Set AHI
	}
	else
	{
		//Commanded Phase B
		lastDir = PHASE_B;
     8f2:	21 e0       	ldi	r18, 0x01	; 1
     8f4:	20 93 ce 21 	sts	0x21CE, r18
     8f8:	81 30       	cpi	r24, 0x01	; 1
     8fa:	20 ef       	ldi	r18, 0xF0	; 240
     8fc:	92 07       	cpc	r25, r18
     8fe:	14 f4       	brge	.+4      	; 0x904 <motor1_set+0x8a>
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	90 ef       	ldi	r25, 0xF0	; 240
		{
			value = -4095;
		}
		value*=-1;

		PORTD.OUTCLR = PIN0_bm;	//Clear AHI
     904:	a0 e6       	ldi	r26, 0x60	; 96
     906:	b6 e0       	ldi	r27, 0x06	; 6
     908:	21 e0       	ldi	r18, 0x01	; 1
     90a:	16 96       	adiw	r26, 0x06	; 6
     90c:	2c 93       	st	X, r18
     90e:	16 97       	sbiw	r26, 0x06	; 6
		TCD0.CCD = 0;			//Hold BLO low
     910:	e0 e0       	ldi	r30, 0x00	; 0
     912:	f9 e0       	ldi	r31, 0x09	; 9
     914:	16 a6       	std	Z+46, r1	; 0x2e
     916:	17 a6       	std	Z+47, r1	; 0x2f
		TCD0.CNT = TCD0.PER;
     918:	26 a1       	ldd	r18, Z+38	; 0x26
     91a:	37 a1       	ldd	r19, Z+39	; 0x27
     91c:	20 a3       	std	Z+32, r18	; 0x20
     91e:	31 a3       	std	Z+33, r19	; 0x21
		lastDir = PHASE_B;
		if(value < -4095)
		{
			value = -4095;
		}
		value*=-1;
     920:	91 95       	neg	r25
     922:	81 95       	neg	r24
     924:	91 09       	sbc	r25, r1
		PORTD.OUTCLR = PIN0_bm;	//Clear AHI
		TCD0.CCD = 0;			//Hold BLO low
		TCD0.CNT = TCD0.PER;

		uint16_t pwmVal = (uint16_t)value;
		TCD0.CCB = pwmVal;		//Set ALO pwm
     926:	82 a7       	std	Z+42, r24	; 0x2a
     928:	93 a7       	std	Z+43, r25	; 0x2b
		TCD0.CNT = TCD0.PER;
     92a:	86 a1       	ldd	r24, Z+38	; 0x26
     92c:	97 a1       	ldd	r25, Z+39	; 0x27
     92e:	80 a3       	std	Z+32, r24	; 0x20
     930:	91 a3       	std	Z+33, r25	; 0x21
		PORTD.OUTSET = PIN2_bm;
     932:	84 e0       	ldi	r24, 0x04	; 4
     934:	15 96       	adiw	r26, 0x05	; 5
     936:	8c 93       	st	X, r24
     938:	08 95       	ret

		TCD0.CCB = TCD0.PER;		//Hold ALO high
		TCD0.CCD = TCD0.PER;		//Hold BLO high
		TCD0.CNT = TCD0.PER;
	}
	else if(value > 0 || (smoothStop && (lastDir == PHASE_A))  )
     93a:	18 16       	cp	r1, r24
     93c:	19 06       	cpc	r1, r25
     93e:	0c f4       	brge	.+2      	; 0x942 <motor1_set+0xc8>
     940:	b9 cf       	rjmp	.-142    	; 0x8b4 <motor1_set+0x3a>
     942:	d7 cf       	rjmp	.-82     	; 0x8f2 <motor1_set+0x78>

00000944 <qdec_init>:

static uint16_t cpr1 = 100;
static float lastVel1 = 0;

void qdec_init(uint16_t cpr0p, uint16_t cpr1p)
{
     944:	1f 93       	push	r17
     946:	cf 93       	push	r28
     948:	df 93       	push	r29
	//Initializing qdec0
	cpr0 = cpr0p;
     94a:	80 93 02 20 	sts	0x2002, r24
     94e:	90 93 03 20 	sts	0x2003, r25
	PORTC.DIRCLR = PIN4_bm | PIN5_bm;
     952:	e0 e4       	ldi	r30, 0x40	; 64
     954:	f6 e0       	ldi	r31, 0x06	; 6
     956:	90 e3       	ldi	r25, 0x30	; 48
     958:	92 83       	std	Z+2, r25	; 0x02

	// Set QDPH0 and QDPH1 sensing level.
	PORTCFG.MPCMASK = PIN4_bm | PIN5_bm;
     95a:	c0 eb       	ldi	r28, 0xB0	; 176
     95c:	d0 e0       	ldi	r29, 0x00	; 0
     95e:	98 83       	st	Y, r25
	PORTC.PIN0CTRL = (PORTC.PIN0CTRL & ~PORT_ISC_gm) | PORT_ISC_LEVEL_gc;
     960:	80 89       	ldd	r24, Z+16	; 0x10
     962:	88 7f       	andi	r24, 0xF8	; 248
     964:	83 60       	ori	r24, 0x03	; 3
     966:	80 8b       	std	Z+16, r24	; 0x10

	// Configure event
	EVSYS.CH0MUX = EVSYS_CHMUX_PORTC_PIN4_gc;
     968:	e0 e8       	ldi	r30, 0x80	; 128
     96a:	f1 e0       	ldi	r31, 0x01	; 1
     96c:	84 e6       	ldi	r24, 0x64	; 100
     96e:	80 83       	st	Z, r24
	EVSYS.CH0CTRL = EVSYS_QDEN_bm | EVSYS_DIGFILT_2SAMPLES_gc;
     970:	19 e0       	ldi	r17, 0x09	; 9
     972:	10 87       	std	Z+8, r17	; 0x08

	// Configure TC as a quadrature counter.
	TCE0.CTRLD = (uint8_t) TC_EVACT_QDEC_gc | TC_EVSEL_CH0_gc;
     974:	a0 e0       	ldi	r26, 0x00	; 0
     976:	ba e0       	ldi	r27, 0x0A	; 10
     978:	28 e6       	ldi	r18, 0x68	; 104
     97a:	13 96       	adiw	r26, 0x03	; 3
     97c:	2c 93       	st	X, r18
     97e:	13 97       	sbiw	r26, 0x03	; 3
	TCE0.CTRLA = TC_CLKSEL_DIV1_gc;
     980:	51 e0       	ldi	r21, 0x01	; 1
     982:	5c 93       	st	X, r21

	// Configure channel 2 to input pin for freq calculation.
	EVSYS.CH1MUX = EVSYS_CHMUX_PORTC_PIN4_gc;
     984:	81 83       	std	Z+1, r24	; 0x01
	EVSYS.CH1CTRL = EVSYS_DIGFILT_4SAMPLES_gc;
     986:	43 e0       	ldi	r20, 0x03	; 3
     988:	41 87       	std	Z+9, r20	; 0x09

	// Configure TC to capture frequency.
	TCC1.CTRLD = (uint8_t) TC_EVACT_FRQ_gc | TC_EVSEL_CH1_gc;
     98a:	a0 e4       	ldi	r26, 0x40	; 64
     98c:	b8 e0       	ldi	r27, 0x08	; 8
     98e:	89 ea       	ldi	r24, 0xA9	; 169
     990:	13 96       	adiw	r26, 0x03	; 3
     992:	8c 93       	st	X, r24
     994:	13 97       	sbiw	r26, 0x03	; 3
	TCC1.CTRLB = TC1_CCAEN_bm;
     996:	30 e1       	ldi	r19, 0x10	; 16
     998:	11 96       	adiw	r26, 0x01	; 1
     99a:	3c 93       	st	X, r19
     99c:	11 97       	sbiw	r26, 0x01	; 1
	TCC1.CTRLA = TC_CLKSEL_DIV256_gc;
     99e:	26 e0       	ldi	r18, 0x06	; 6
     9a0:	2c 93       	st	X, r18


	//Initializing qdec1 
	cpr1 = cpr1p;
     9a2:	60 93 00 20 	sts	0x2000, r22
     9a6:	70 93 01 20 	sts	0x2001, r23
	PORTD.DIRCLR = PIN4_bm | PIN5_bm;
     9aa:	a0 e6       	ldi	r26, 0x60	; 96
     9ac:	b6 e0       	ldi	r27, 0x06	; 6
     9ae:	12 96       	adiw	r26, 0x02	; 2
     9b0:	9c 93       	st	X, r25
     9b2:	12 97       	sbiw	r26, 0x02	; 2

	// Set QDPH0 and QDPH1 sensing level.
	PORTCFG.MPCMASK = PIN4_bm | PIN5_bm;
     9b4:	98 83       	st	Y, r25
	PORTD.PIN0CTRL = (PORTD.PIN0CTRL & ~PORT_ISC_gm) | PORT_ISC_LEVEL_gc;
     9b6:	50 96       	adiw	r26, 0x10	; 16
     9b8:	8c 91       	ld	r24, X
     9ba:	50 97       	sbiw	r26, 0x10	; 16
     9bc:	88 7f       	andi	r24, 0xF8	; 248
     9be:	83 60       	ori	r24, 0x03	; 3
     9c0:	50 96       	adiw	r26, 0x10	; 16
     9c2:	8c 93       	st	X, r24

	// Configure event
	EVSYS.CH2MUX = EVSYS_CHMUX_PORTD_PIN4_gc;
     9c4:	8c e6       	ldi	r24, 0x6C	; 108
     9c6:	82 83       	std	Z+2, r24	; 0x02
	EVSYS.CH2CTRL = EVSYS_QDEN_bm | EVSYS_DIGFILT_2SAMPLES_gc;
     9c8:	12 87       	std	Z+10, r17	; 0x0a

	// Configure TC as a quadrature counter.
	TCF0.CTRLD = (uint8_t) TC_EVACT_QDEC_gc | TC_EVSEL_CH2_gc;
     9ca:	a0 e0       	ldi	r26, 0x00	; 0
     9cc:	bb e0       	ldi	r27, 0x0B	; 11
     9ce:	9a e6       	ldi	r25, 0x6A	; 106
     9d0:	13 96       	adiw	r26, 0x03	; 3
     9d2:	9c 93       	st	X, r25
     9d4:	13 97       	sbiw	r26, 0x03	; 3
	TCF0.CTRLA = TC_CLKSEL_DIV1_gc;
     9d6:	5c 93       	st	X, r21

	// Configure channel 3 to input pin for freq calculation.
	EVSYS.CH3MUX = EVSYS_CHMUX_PORTD_PIN4_gc;
     9d8:	83 83       	std	Z+3, r24	; 0x03
	EVSYS.CH3CTRL = EVSYS_DIGFILT_4SAMPLES_gc;
     9da:	43 87       	std	Z+11, r20	; 0x0b

	// Configure TC to capture frequency.
	TCD1.CTRLD = (uint8_t) TC_EVACT_FRQ_gc | TC_EVSEL_CH3_gc;
     9dc:	e0 e4       	ldi	r30, 0x40	; 64
     9de:	f9 e0       	ldi	r31, 0x09	; 9
     9e0:	8b ea       	ldi	r24, 0xAB	; 171
     9e2:	83 83       	std	Z+3, r24	; 0x03
	TCD1.CTRLB = TC1_CCAEN_bm;
     9e4:	31 83       	std	Z+1, r19	; 0x01
	TCD1.CTRLA = TC_CLKSEL_DIV256_gc;
     9e6:	20 83       	st	Z, r18

}
     9e8:	df 91       	pop	r29
     9ea:	cf 91       	pop	r28
     9ec:	1f 91       	pop	r17
     9ee:	08 95       	ret

000009f0 <qdec_vel0>:
{
	return TCF0.CNT;
}

float qdec_vel0()
{
     9f0:	cf 92       	push	r12
     9f2:	df 92       	push	r13
     9f4:	ef 92       	push	r14
     9f6:	ff 92       	push	r15
     9f8:	cf 93       	push	r28
     9fa:	df 93       	push	r29
	if(TCC1.INTFLAGS & TC1_OVFIF_bm)
     9fc:	80 91 4c 08 	lds	r24, 0x084C
     a00:	80 ff       	sbrs	r24, 0
     a02:	09 c0       	rjmp	.+18     	; 0xa16 <qdec_vel0+0x26>
	{
		//TCC1.INTFLAGS |= TC1_OVFIF_bm;
		lastVel0 = 0;
     a04:	10 92 d4 21 	sts	0x21D4, r1
     a08:	10 92 d5 21 	sts	0x21D5, r1
     a0c:	10 92 d6 21 	sts	0x21D6, r1
     a10:	10 92 d7 21 	sts	0x21D7, r1
     a14:	3c c0       	rjmp	.+120    	; 0xa8e <qdec_vel0+0x9e>
	}
	else if(TCC1.INTFLAGS & TC1_CCAIF_bm)
     a16:	80 91 4c 08 	lds	r24, 0x084C
     a1a:	84 ff       	sbrs	r24, 4
     a1c:	38 c0       	rjmp	.+112    	; 0xa8e <qdec_vel0+0x9e>
	{
		lastVel0 = (DEGREES_PER_REV*(CLOCK_CPU/PRESCALER))/((float)cpr0*TCC1.CCA);
     a1e:	c0 91 68 08 	lds	r28, 0x0868
     a22:	d0 91 69 08 	lds	r29, 0x0869
     a26:	60 91 02 20 	lds	r22, 0x2002
     a2a:	70 91 03 20 	lds	r23, 0x2003
     a2e:	80 e0       	ldi	r24, 0x00	; 0
     a30:	90 e0       	ldi	r25, 0x00	; 0
     a32:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <__floatunsisf>
     a36:	6b 01       	movw	r12, r22
     a38:	7c 01       	movw	r14, r24
     a3a:	be 01       	movw	r22, r28
     a3c:	80 e0       	ldi	r24, 0x00	; 0
     a3e:	90 e0       	ldi	r25, 0x00	; 0
     a40:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <__floatunsisf>
     a44:	9b 01       	movw	r18, r22
     a46:	ac 01       	movw	r20, r24
     a48:	c7 01       	movw	r24, r14
     a4a:	b6 01       	movw	r22, r12
     a4c:	0e 94 15 0c 	call	0x182a	; 0x182a <__mulsf3>
     a50:	9b 01       	movw	r18, r22
     a52:	ac 01       	movw	r20, r24
     a54:	60 e5       	ldi	r22, 0x50	; 80
     a56:	79 ea       	ldi	r23, 0xA9	; 169
     a58:	8b e2       	ldi	r24, 0x2B	; 43
     a5a:	9c e4       	ldi	r25, 0x4C	; 76
     a5c:	0e 94 b6 0a 	call	0x156c	; 0x156c <__divsf3>
     a60:	60 93 d4 21 	sts	0x21D4, r22
     a64:	70 93 d5 21 	sts	0x21D5, r23
     a68:	80 93 d6 21 	sts	0x21D6, r24
     a6c:	90 93 d7 21 	sts	0x21D7, r25
		if (TCE0.CTRLFSET & TC0_DIR_bm) //Yes, this should be TCE0 ('quadrature timer)
     a70:	20 91 09 0a 	lds	r18, 0x0A09
     a74:	20 ff       	sbrs	r18, 0
     a76:	0b c0       	rjmp	.+22     	; 0xa8e <qdec_vel0+0x9e>
		{
			//We're going clockwise (negative)
			lastVel0*=-1;
     a78:	dc 01       	movw	r26, r24
     a7a:	cb 01       	movw	r24, r22
     a7c:	b0 58       	subi	r27, 0x80	; 128
     a7e:	80 93 d4 21 	sts	0x21D4, r24
     a82:	90 93 d5 21 	sts	0x21D5, r25
     a86:	a0 93 d6 21 	sts	0x21D6, r26
     a8a:	b0 93 d7 21 	sts	0x21D7, r27
		}
	}//else - No new velocity, use the last one

	return lastVel0;
     a8e:	60 91 d4 21 	lds	r22, 0x21D4
     a92:	70 91 d5 21 	lds	r23, 0x21D5
     a96:	80 91 d6 21 	lds	r24, 0x21D6
     a9a:	90 91 d7 21 	lds	r25, 0x21D7
}
     a9e:	df 91       	pop	r29
     aa0:	cf 91       	pop	r28
     aa2:	ff 90       	pop	r15
     aa4:	ef 90       	pop	r14
     aa6:	df 90       	pop	r13
     aa8:	cf 90       	pop	r12
     aaa:	08 95       	ret

00000aac <qdec_vel1>:
float qdec_vel1()
{
     aac:	cf 92       	push	r12
     aae:	df 92       	push	r13
     ab0:	ef 92       	push	r14
     ab2:	ff 92       	push	r15
     ab4:	cf 93       	push	r28
     ab6:	df 93       	push	r29
	if(TCD1.INTFLAGS & TC1_OVFIF_bm)
     ab8:	80 91 4c 09 	lds	r24, 0x094C
     abc:	80 ff       	sbrs	r24, 0
     abe:	09 c0       	rjmp	.+18     	; 0xad2 <qdec_vel1+0x26>
	{
		lastVel1 = 0;
     ac0:	10 92 d0 21 	sts	0x21D0, r1
     ac4:	10 92 d1 21 	sts	0x21D1, r1
     ac8:	10 92 d2 21 	sts	0x21D2, r1
     acc:	10 92 d3 21 	sts	0x21D3, r1
     ad0:	3c c0       	rjmp	.+120    	; 0xb4a <qdec_vel1+0x9e>
	}
	else if(TCD1.INTFLAGS & TC1_CCAIF_bm)
     ad2:	80 91 4c 09 	lds	r24, 0x094C
     ad6:	84 ff       	sbrs	r24, 4
     ad8:	38 c0       	rjmp	.+112    	; 0xb4a <qdec_vel1+0x9e>
	{
		lastVel1 = (DEGREES_PER_REV*(CLOCK_CPU/PRESCALER))/((float)cpr1*TCD1.CCA);
     ada:	c0 91 68 09 	lds	r28, 0x0968
     ade:	d0 91 69 09 	lds	r29, 0x0969
     ae2:	60 91 00 20 	lds	r22, 0x2000
     ae6:	70 91 01 20 	lds	r23, 0x2001
     aea:	80 e0       	ldi	r24, 0x00	; 0
     aec:	90 e0       	ldi	r25, 0x00	; 0
     aee:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <__floatunsisf>
     af2:	6b 01       	movw	r12, r22
     af4:	7c 01       	movw	r14, r24
     af6:	be 01       	movw	r22, r28
     af8:	80 e0       	ldi	r24, 0x00	; 0
     afa:	90 e0       	ldi	r25, 0x00	; 0
     afc:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <__floatunsisf>
     b00:	9b 01       	movw	r18, r22
     b02:	ac 01       	movw	r20, r24
     b04:	c7 01       	movw	r24, r14
     b06:	b6 01       	movw	r22, r12
     b08:	0e 94 15 0c 	call	0x182a	; 0x182a <__mulsf3>
     b0c:	9b 01       	movw	r18, r22
     b0e:	ac 01       	movw	r20, r24
     b10:	60 e5       	ldi	r22, 0x50	; 80
     b12:	79 ea       	ldi	r23, 0xA9	; 169
     b14:	8b e2       	ldi	r24, 0x2B	; 43
     b16:	9c e4       	ldi	r25, 0x4C	; 76
     b18:	0e 94 b6 0a 	call	0x156c	; 0x156c <__divsf3>
     b1c:	60 93 d0 21 	sts	0x21D0, r22
     b20:	70 93 d1 21 	sts	0x21D1, r23
     b24:	80 93 d2 21 	sts	0x21D2, r24
     b28:	90 93 d3 21 	sts	0x21D3, r25
		if (TCF0.CTRLFSET & TC0_DIR_bm) //Yes, this should be TCF0 (quadrature timer)
     b2c:	20 91 09 0b 	lds	r18, 0x0B09
     b30:	20 ff       	sbrs	r18, 0
     b32:	0b c0       	rjmp	.+22     	; 0xb4a <qdec_vel1+0x9e>
		{
			//We're going clockwise (negative)
			lastVel1*=-1;
     b34:	dc 01       	movw	r26, r24
     b36:	cb 01       	movw	r24, r22
     b38:	b0 58       	subi	r27, 0x80	; 128
     b3a:	80 93 d0 21 	sts	0x21D0, r24
     b3e:	90 93 d1 21 	sts	0x21D1, r25
     b42:	a0 93 d2 21 	sts	0x21D2, r26
     b46:	b0 93 d3 21 	sts	0x21D3, r27
		}
	}//else - No new velocity, use the last one

	return lastVel1;
     b4a:	60 91 d0 21 	lds	r22, 0x21D0
     b4e:	70 91 d1 21 	lds	r23, 0x21D1
     b52:	80 91 d2 21 	lds	r24, 0x21D2
     b56:	90 91 d3 21 	lds	r25, 0x21D3
}
     b5a:	df 91       	pop	r29
     b5c:	cf 91       	pop	r28
     b5e:	ff 90       	pop	r15
     b60:	ef 90       	pop	r14
     b62:	df 90       	pop	r13
     b64:	cf 90       	pop	r12
     b66:	08 95       	ret

00000b68 <CCPWrite>:
 *
 *  \param address A pointer to the address to write to.
 *  \param value   The value to put in to the register.
 */
static void CCPWrite( volatile uint8_t * address, uint8_t value )
{
     b68:	0f 93       	push	r16
     b6a:	cf 93       	push	r28
     b6c:	df 93       	push	r29
     b6e:	1f 92       	push	r1
     b70:	cd b7       	in	r28, 0x3d	; 61
     b72:	de b7       	in	r29, 0x3e	; 62
	// Restore global interrupt setting from scratch register.
        asm("out  0x3F, R1");

#elif defined __GNUC__
	//AVR_ENTER_CRITICAL_REGION( );
	uint8_t volatile saved_sreg = SREG;
     b74:	2f b7       	in	r18, 0x3f	; 63
     b76:	29 83       	std	Y+1, r18	; 0x01
	SREG &= ~((uint8_t)CPU_I_bm);
     b78:	2f b7       	in	r18, 0x3f	; 63
     b7a:	2f 77       	andi	r18, 0x7F	; 127
     b7c:	2f bf       	out	0x3f, r18	; 63
	//cli();
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
     b7e:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
     b80:	fc 01       	movw	r30, r24
     b82:	08 ed       	ldi	r16, 0xD8	; 216
     b84:	04 bf       	out	0x34, r16	; 52
     b86:	60 83       	st	Z, r22
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

	//AVR_LEAVE_CRITICAL_REGION( );
	SREG = saved_sreg;
     b88:	89 81       	ldd	r24, Y+1	; 0x01
     b8a:	8f bf       	out	0x3f, r24	; 63
#endif
}
     b8c:	0f 90       	pop	r0
     b8e:	df 91       	pop	r29
     b90:	cf 91       	pop	r28
     b92:	0f 91       	pop	r16
     b94:	08 95       	ret

00000b96 <sysClock_set32>:

void sysClock_set32()
{
	OSC.CTRL |= OSC_RC32MEN_bm;
     b96:	e0 e5       	ldi	r30, 0x50	; 80
     b98:	f0 e0       	ldi	r31, 0x00	; 0
     b9a:	80 81       	ld	r24, Z
     b9c:	82 60       	ori	r24, 0x02	; 2
     b9e:	80 83       	st	Z, r24
	CCPWrite( &CLK.PSCTRL, ( (uint8_t) CLK_PSADIV_1_gc | CLK_PSBCDIV_1_1_gc));
     ba0:	60 e0       	ldi	r22, 0x00	; 0
     ba2:	81 e4       	ldi	r24, 0x41	; 65
     ba4:	90 e0       	ldi	r25, 0x00	; 0
     ba6:	0e 94 b4 05 	call	0xb68	; 0xb68 <CCPWrite>
	//Wait for 32 MHz clock to startup
	while(!(OSC.STATUS & OSC_RC32MRDY_bm)){}
     baa:	e0 e5       	ldi	r30, 0x50	; 80
     bac:	f0 e0       	ldi	r31, 0x00	; 0
     bae:	81 81       	ldd	r24, Z+1	; 0x01
     bb0:	81 ff       	sbrs	r24, 1
     bb2:	fd cf       	rjmp	.-6      	; 0xbae <sysClock_set32+0x18>
	//Select 32 MHz clock as main clock source
	CCPWrite( &CLK.CTRL, CLK_SCLKSEL_RC32M_gc);
     bb4:	61 e0       	ldi	r22, 0x01	; 1
     bb6:	80 e4       	ldi	r24, 0x40	; 64
     bb8:	90 e0       	ldi	r25, 0x00	; 0
     bba:	0e 94 b4 05 	call	0xb68	; 0xb68 <CCPWrite>
     bbe:	08 95       	ret

00000bc0 <TWI_SlaveInitializeDriver>:
 *  \param processDataFunction  Pointer to the function that handles incoming data.
 */
void TWI_SlaveInitializeDriver(TWI_Slave_t *twi,
                               TWI_t *module,
                               void (*processDataFunction) (void))
{
     bc0:	fc 01       	movw	r30, r24
	twi->interface = module;
     bc2:	60 83       	st	Z, r22
     bc4:	71 83       	std	Z+1, r23	; 0x01
	twi->Process_Data = processDataFunction;
     bc6:	42 83       	std	Z+2, r20	; 0x02
     bc8:	53 83       	std	Z+3, r21	; 0x03
	twi->bytesReceived = 0;
     bca:	10 a2       	std	Z+32, r1	; 0x20
	twi->bytesSent = 0;
     bcc:	11 a2       	std	Z+33, r1	; 0x21
	twi->status = TWIS_STATUS_READY;
     bce:	12 a2       	std	Z+34, r1	; 0x22
	twi->result = TWIS_RESULT_UNKNOWN;
     bd0:	13 a2       	std	Z+35, r1	; 0x23
	twi->abort = false;
     bd2:	14 a2       	std	Z+36, r1	; 0x24
     bd4:	08 95       	ret

00000bd6 <TWI_SlaveInitializeModule>:
 */
void TWI_SlaveInitializeModule(TWI_Slave_t *twi,
                               uint8_t address,
                               TWI_SLAVE_INTLVL_t intLevel)
{
	twi->interface->SLAVE.CTRLA = intLevel |
     bd6:	dc 01       	movw	r26, r24
     bd8:	ed 91       	ld	r30, X+
     bda:	fc 91       	ld	r31, X
     bdc:	11 97       	sbiw	r26, 0x01	; 1
     bde:	48 63       	ori	r20, 0x38	; 56
     be0:	40 87       	std	Z+8, r20	; 0x08
	                              TWI_SLAVE_DIEN_bm |
	                              TWI_SLAVE_APIEN_bm |
	                              TWI_SLAVE_ENABLE_bm;
	twi->interface->SLAVE.ADDR = (address<<1);
     be2:	ed 91       	ld	r30, X+
     be4:	fc 91       	ld	r31, X
     be6:	66 0f       	add	r22, r22
     be8:	63 87       	std	Z+11, r22	; 0x0b
     bea:	08 95       	ret

00000bec <TWI_SlaveAddressMatchHandler>:
 *  Prepares TWI module for transaction when an address match occures.
 *
 *  \param twi The TWI_Slave_t struct instance.
 */
void TWI_SlaveAddressMatchHandler(TWI_Slave_t *twi)
{
     bec:	fc 01       	movw	r30, r24
	/* If application signalling need to abort (error occured). */
	if (twi->abort) {
     bee:	84 a1       	ldd	r24, Z+36	; 0x24
     bf0:	88 23       	and	r24, r24
     bf2:	51 f0       	breq	.+20     	; 0xc08 <TWI_SlaveAddressMatchHandler+0x1c>
		twi->interface->SLAVE.CTRLB = TWI_SLAVE_CMD_COMPTRANS_gc;
     bf4:	a0 81       	ld	r26, Z
     bf6:	b1 81       	ldd	r27, Z+1	; 0x01
     bf8:	82 e0       	ldi	r24, 0x02	; 2
     bfa:	19 96       	adiw	r26, 0x09	; 9
     bfc:	8c 93       	st	X, r24
 *  \param twi    The TWI_Slave_t struct instance.
 *  \param result The result of the transaction.
 */
void TWI_SlaveTransactionFinished(TWI_Slave_t *twi, uint8_t result)
{
	twi->result = result;
     bfe:	86 e0       	ldi	r24, 0x06	; 6
     c00:	83 a3       	std	Z+35, r24	; 0x23
	twi->status = TWIS_STATUS_READY;
     c02:	12 a2       	std	Z+34, r1	; 0x22
{
	/* If application signalling need to abort (error occured). */
	if (twi->abort) {
		twi->interface->SLAVE.CTRLB = TWI_SLAVE_CMD_COMPTRANS_gc;
		TWI_SlaveTransactionFinished(twi, TWIS_RESULT_ABORTED);
		twi->abort = false;
     c04:	14 a2       	std	Z+36, r1	; 0x24
     c06:	08 95       	ret
	} else {
		twi->status = TWIS_STATUS_BUSY;
     c08:	81 e0       	ldi	r24, 0x01	; 1
     c0a:	82 a3       	std	Z+34, r24	; 0x22
		twi->result = TWIS_RESULT_UNKNOWN;
     c0c:	13 a2       	std	Z+35, r1	; 0x23

		/* Disable stop interrupt. */
		uint8_t currentCtrlA = twi->interface->SLAVE.CTRLA;
     c0e:	a0 81       	ld	r26, Z
     c10:	b1 81       	ldd	r27, Z+1	; 0x01
     c12:	18 96       	adiw	r26, 0x08	; 8
     c14:	8c 91       	ld	r24, X
     c16:	18 97       	sbiw	r26, 0x08	; 8
		twi->interface->SLAVE.CTRLA = currentCtrlA & ~TWI_SLAVE_PIEN_bm;
     c18:	8b 7f       	andi	r24, 0xFB	; 251
     c1a:	18 96       	adiw	r26, 0x08	; 8
     c1c:	8c 93       	st	X, r24

		twi->bytesReceived = 0;
     c1e:	10 a2       	std	Z+32, r1	; 0x20
		twi->bytesSent = 0;
     c20:	11 a2       	std	Z+33, r1	; 0x21

		/* Send ACK, wait for data interrupt. */
		twi->interface->SLAVE.CTRLB = TWI_SLAVE_CMD_RESPONSE_gc;
     c22:	01 90       	ld	r0, Z+
     c24:	f0 81       	ld	r31, Z
     c26:	e0 2d       	mov	r30, r0
     c28:	83 e0       	ldi	r24, 0x03	; 3
     c2a:	81 87       	std	Z+9, r24	; 0x09
     c2c:	08 95       	ret

00000c2e <TWI_SlaveStopHandler>:
/*! \brief TWI stop condition interrupt handler.
 *
 *  \param twi The TWI_Slave_t struct instance.
 */
void TWI_SlaveStopHandler(TWI_Slave_t *twi)
{
     c2e:	fc 01       	movw	r30, r24
	/* Disable stop interrupt. */
	uint8_t currentCtrlA = twi->interface->SLAVE.CTRLA;
     c30:	a0 81       	ld	r26, Z
     c32:	b1 81       	ldd	r27, Z+1	; 0x01
     c34:	18 96       	adiw	r26, 0x08	; 8
     c36:	8c 91       	ld	r24, X
     c38:	18 97       	sbiw	r26, 0x08	; 8
	twi->interface->SLAVE.CTRLA = currentCtrlA & ~TWI_SLAVE_PIEN_bm;
     c3a:	8b 7f       	andi	r24, 0xFB	; 251
     c3c:	18 96       	adiw	r26, 0x08	; 8
     c3e:	8c 93       	st	X, r24
	
	/* Clear APIF, according to flowchart don't ACK or NACK */
	uint8_t currentStatus = twi->interface->SLAVE.STATUS;
     c40:	a0 81       	ld	r26, Z
     c42:	b1 81       	ldd	r27, Z+1	; 0x01
     c44:	1a 96       	adiw	r26, 0x0a	; 10
     c46:	8c 91       	ld	r24, X
     c48:	1a 97       	sbiw	r26, 0x0a	; 10
	twi->interface->SLAVE.STATUS = currentStatus | TWI_SLAVE_APIF_bm;
     c4a:	80 64       	ori	r24, 0x40	; 64
     c4c:	1a 96       	adiw	r26, 0x0a	; 10
     c4e:	8c 93       	st	X, r24
 *  \param twi    The TWI_Slave_t struct instance.
 *  \param result The result of the transaction.
 */
void TWI_SlaveTransactionFinished(TWI_Slave_t *twi, uint8_t result)
{
	twi->result = result;
     c50:	81 e0       	ldi	r24, 0x01	; 1
     c52:	83 a3       	std	Z+35, r24	; 0x23
	twi->status = TWIS_STATUS_READY;
     c54:	12 a2       	std	Z+34, r1	; 0x22
     c56:	08 95       	ret

00000c58 <TWI_SlaveReadHandler>:
 *  Handles TWI slave read transactions and responses.
 *
 *  \param twi The TWI_Slave_t struct instance.
 */
void TWI_SlaveReadHandler(TWI_Slave_t *twi)
{
     c58:	cf 93       	push	r28
     c5a:	df 93       	push	r29
     c5c:	fc 01       	movw	r30, r24
	/* Enable stop interrupt. */
	uint8_t currentCtrlA = twi->interface->SLAVE.CTRLA;
     c5e:	a0 81       	ld	r26, Z
     c60:	b1 81       	ldd	r27, Z+1	; 0x01
     c62:	18 96       	adiw	r26, 0x08	; 8
     c64:	8c 91       	ld	r24, X
     c66:	18 97       	sbiw	r26, 0x08	; 8
	twi->interface->SLAVE.CTRLA = currentCtrlA | TWI_SLAVE_PIEN_bm;
     c68:	84 60       	ori	r24, 0x04	; 4
     c6a:	18 96       	adiw	r26, 0x08	; 8
     c6c:	8c 93       	st	X, r24

	/* If free space in buffer. */
	if (twi->bytesReceived < TWIS_RECEIVE_BUFFER_SIZE) {
     c6e:	80 a1       	ldd	r24, Z+32	; 0x20
     c70:	88 30       	cpi	r24, 0x08	; 8
     c72:	08 f5       	brcc	.+66     	; 0xcb6 <TWI_SlaveReadHandler+0x5e>
     c74:	ef 01       	movw	r28, r30
		/* Fetch data */
		uint8_t data = twi->interface->SLAVE.DATA;
     c76:	01 90       	ld	r0, Z+
     c78:	f0 81       	ld	r31, Z
     c7a:	e0 2d       	mov	r30, r0
     c7c:	84 85       	ldd	r24, Z+12	; 0x0c
		twi->receivedData[twi->bytesReceived] = data;
     c7e:	98 a1       	ldd	r25, Y+32	; 0x20
     c80:	fe 01       	movw	r30, r28
     c82:	e9 0f       	add	r30, r25
     c84:	f1 1d       	adc	r31, r1
     c86:	84 83       	std	Z+4, r24	; 0x04

		/* Process data. */
		twi->Process_Data();
     c88:	ea 81       	ldd	r30, Y+2	; 0x02
     c8a:	fb 81       	ldd	r31, Y+3	; 0x03
     c8c:	19 95       	eicall

		twi->bytesReceived++;
     c8e:	88 a1       	ldd	r24, Y+32	; 0x20
     c90:	8f 5f       	subi	r24, 0xFF	; 255
     c92:	88 a3       	std	Y+32, r24	; 0x20

		/* If application signalling need to abort (error occured),
		 * complete transaction and wait for next START. Otherwise
		 * send ACK and wait for data interrupt.
		 */
		if (twi->abort) {
     c94:	8c a1       	ldd	r24, Y+36	; 0x24
     c96:	88 23       	and	r24, r24
     c98:	49 f0       	breq	.+18     	; 0xcac <TWI_SlaveReadHandler+0x54>
			twi->interface->SLAVE.CTRLB = TWI_SLAVE_CMD_COMPTRANS_gc;
     c9a:	e8 81       	ld	r30, Y
     c9c:	f9 81       	ldd	r31, Y+1	; 0x01
     c9e:	82 e0       	ldi	r24, 0x02	; 2
     ca0:	81 87       	std	Z+9, r24	; 0x09
 *  \param twi    The TWI_Slave_t struct instance.
 *  \param result The result of the transaction.
 */
void TWI_SlaveTransactionFinished(TWI_Slave_t *twi, uint8_t result)
{
	twi->result = result;
     ca2:	86 e0       	ldi	r24, 0x06	; 6
     ca4:	8b a3       	std	Y+35, r24	; 0x23
	twi->status = TWIS_STATUS_READY;
     ca6:	1a a2       	std	Y+34, r1	; 0x22
		 * send ACK and wait for data interrupt.
		 */
		if (twi->abort) {
			twi->interface->SLAVE.CTRLB = TWI_SLAVE_CMD_COMPTRANS_gc;
			TWI_SlaveTransactionFinished(twi, TWIS_RESULT_ABORTED);
			twi->abort = false;
     ca8:	1c a2       	std	Y+36, r1	; 0x24
     caa:	0d c0       	rjmp	.+26     	; 0xcc6 <TWI_SlaveReadHandler+0x6e>
		} else {
			twi->interface->SLAVE.CTRLB = TWI_SLAVE_CMD_RESPONSE_gc;
     cac:	e8 81       	ld	r30, Y
     cae:	f9 81       	ldd	r31, Y+1	; 0x01
     cb0:	83 e0       	ldi	r24, 0x03	; 3
     cb2:	81 87       	std	Z+9, r24	; 0x09
     cb4:	08 c0       	rjmp	.+16     	; 0xcc6 <TWI_SlaveReadHandler+0x6e>
	}
	/* If buffer overflow, send NACK and wait for next START. Set
	 * result buffer overflow.
	 */
	else {
		twi->interface->SLAVE.CTRLB = TWI_SLAVE_ACKACT_bm |
     cb6:	a0 81       	ld	r26, Z
     cb8:	b1 81       	ldd	r27, Z+1	; 0x01
     cba:	86 e0       	ldi	r24, 0x06	; 6
     cbc:	19 96       	adiw	r26, 0x09	; 9
     cbe:	8c 93       	st	X, r24
 *  \param twi    The TWI_Slave_t struct instance.
 *  \param result The result of the transaction.
 */
void TWI_SlaveTransactionFinished(TWI_Slave_t *twi, uint8_t result)
{
	twi->result = result;
     cc0:	82 e0       	ldi	r24, 0x02	; 2
     cc2:	83 a3       	std	Z+35, r24	; 0x23
	twi->status = TWIS_STATUS_READY;
     cc4:	12 a2       	std	Z+34, r1	; 0x22
	else {
		twi->interface->SLAVE.CTRLB = TWI_SLAVE_ACKACT_bm |
		                              TWI_SLAVE_CMD_COMPTRANS_gc;
		TWI_SlaveTransactionFinished(twi, TWIS_RESULT_BUFFER_OVERFLOW);
	}
}
     cc6:	df 91       	pop	r29
     cc8:	cf 91       	pop	r28
     cca:	08 95       	ret

00000ccc <TWI_SlaveWriteHandler>:
 *  Handles TWI slave write transactions and responses.
 *
 *  \param twi The TWI_Slave_t struct instance.
 */
void TWI_SlaveWriteHandler(TWI_Slave_t *twi)
{
     ccc:	fc 01       	movw	r30, r24
	/* If NACK, slave write transaction finished. */
	if ((twi->bytesSent > 0) && (twi->interface->SLAVE.STATUS &
     cce:	81 a1       	ldd	r24, Z+33	; 0x21
     cd0:	88 23       	and	r24, r24
     cd2:	71 f0       	breq	.+28     	; 0xcf0 <TWI_SlaveWriteHandler+0x24>
     cd4:	a0 81       	ld	r26, Z
     cd6:	b1 81       	ldd	r27, Z+1	; 0x01
     cd8:	1a 96       	adiw	r26, 0x0a	; 10
     cda:	8c 91       	ld	r24, X
     cdc:	1a 97       	sbiw	r26, 0x0a	; 10
     cde:	84 ff       	sbrs	r24, 4
     ce0:	07 c0       	rjmp	.+14     	; 0xcf0 <TWI_SlaveWriteHandler+0x24>
	                             TWI_SLAVE_RXACK_bm)) {

		twi->interface->SLAVE.CTRLB = TWI_SLAVE_CMD_COMPTRANS_gc;
     ce2:	82 e0       	ldi	r24, 0x02	; 2
     ce4:	19 96       	adiw	r26, 0x09	; 9
     ce6:	8c 93       	st	X, r24
 *  \param twi    The TWI_Slave_t struct instance.
 *  \param result The result of the transaction.
 */
void TWI_SlaveTransactionFinished(TWI_Slave_t *twi, uint8_t result)
{
	twi->result = result;
     ce8:	81 e0       	ldi	r24, 0x01	; 1
     cea:	83 a3       	std	Z+35, r24	; 0x23
	twi->status = TWIS_STATUS_READY;
     cec:	12 a2       	std	Z+34, r1	; 0x22
     cee:	08 95       	ret
		twi->interface->SLAVE.CTRLB = TWI_SLAVE_CMD_COMPTRANS_gc;
		TWI_SlaveTransactionFinished(twi, TWIS_RESULT_OK);
	}
	/* If ACK, master expects more data. */
	else {
		if (twi->bytesSent < TWIS_SEND_BUFFER_SIZE) {
     cf0:	81 a1       	ldd	r24, Z+33	; 0x21
     cf2:	84 31       	cpi	r24, 0x14	; 20
     cf4:	98 f4       	brcc	.+38     	; 0xd1c <TWI_SlaveWriteHandler+0x50>
			uint8_t data = twi->sendData[twi->bytesSent];
     cf6:	81 a1       	ldd	r24, Z+33	; 0x21
     cf8:	df 01       	movw	r26, r30
     cfa:	a8 0f       	add	r26, r24
     cfc:	b1 1d       	adc	r27, r1
     cfe:	1c 96       	adiw	r26, 0x0c	; 12
     d00:	8c 91       	ld	r24, X
			twi->interface->SLAVE.DATA = data;
     d02:	a0 81       	ld	r26, Z
     d04:	b1 81       	ldd	r27, Z+1	; 0x01
     d06:	1c 96       	adiw	r26, 0x0c	; 12
     d08:	8c 93       	st	X, r24
			twi->bytesSent++;
     d0a:	81 a1       	ldd	r24, Z+33	; 0x21
     d0c:	8f 5f       	subi	r24, 0xFF	; 255
     d0e:	81 a3       	std	Z+33, r24	; 0x21

			/* Send data, wait for data interrupt. */
			twi->interface->SLAVE.CTRLB = TWI_SLAVE_CMD_RESPONSE_gc;
     d10:	01 90       	ld	r0, Z+
     d12:	f0 81       	ld	r31, Z
     d14:	e0 2d       	mov	r30, r0
     d16:	83 e0       	ldi	r24, 0x03	; 3
     d18:	81 87       	std	Z+9, r24	; 0x09
     d1a:	08 95       	ret
		}
		/* If buffer overflow. */
		else {
			twi->interface->SLAVE.CTRLB = TWI_SLAVE_CMD_COMPTRANS_gc;
     d1c:	a0 81       	ld	r26, Z
     d1e:	b1 81       	ldd	r27, Z+1	; 0x01
     d20:	82 e0       	ldi	r24, 0x02	; 2
     d22:	19 96       	adiw	r26, 0x09	; 9
     d24:	8c 93       	st	X, r24
 *  \param twi    The TWI_Slave_t struct instance.
 *  \param result The result of the transaction.
 */
void TWI_SlaveTransactionFinished(TWI_Slave_t *twi, uint8_t result)
{
	twi->result = result;
     d26:	83 a3       	std	Z+35, r24	; 0x23
	twi->status = TWIS_STATUS_READY;
     d28:	12 a2       	std	Z+34, r1	; 0x22
     d2a:	08 95       	ret

00000d2c <TWI_SlaveDataHandler>:
 *
 *  \param twi The TWI_Slave_t struct instance.
 */
void TWI_SlaveDataHandler(TWI_Slave_t *twi)
{
	if (twi->interface->SLAVE.STATUS & TWI_SLAVE_DIR_bm) {
     d2c:	dc 01       	movw	r26, r24
     d2e:	ed 91       	ld	r30, X+
     d30:	fc 91       	ld	r31, X
     d32:	22 85       	ldd	r18, Z+10	; 0x0a
     d34:	21 ff       	sbrs	r18, 1
     d36:	03 c0       	rjmp	.+6      	; 0xd3e <TWI_SlaveDataHandler+0x12>
		TWI_SlaveWriteHandler(twi);
     d38:	0e 94 66 06 	call	0xccc	; 0xccc <TWI_SlaveWriteHandler>
     d3c:	08 95       	ret
	} else {
		TWI_SlaveReadHandler(twi);
     d3e:	0e 94 2c 06 	call	0xc58	; 0xc58 <TWI_SlaveReadHandler>
     d42:	08 95       	ret

00000d44 <TWI_SlaveInterruptHandler>:
 *  data transmission, bus error and data collision.
 *
 *  \param twi The TWI_Slave_t struct instance.
 */
void TWI_SlaveInterruptHandler(TWI_Slave_t *twi)
{
     d44:	fc 01       	movw	r30, r24
	uint8_t currentStatus = twi->interface->SLAVE.STATUS;
     d46:	a0 81       	ld	r26, Z
     d48:	b1 81       	ldd	r27, Z+1	; 0x01
     d4a:	1a 96       	adiw	r26, 0x0a	; 10
     d4c:	8c 91       	ld	r24, X

	/* If bus error. */
	if (currentStatus & TWI_SLAVE_BUSERR_bm) {
     d4e:	82 ff       	sbrs	r24, 2
     d50:	06 c0       	rjmp	.+12     	; 0xd5e <TWI_SlaveInterruptHandler+0x1a>
		twi->bytesReceived = 0;
     d52:	10 a2       	std	Z+32, r1	; 0x20
		twi->bytesSent = 0;
     d54:	11 a2       	std	Z+33, r1	; 0x21
		twi->result = TWIS_RESULT_BUS_ERROR;
     d56:	84 e0       	ldi	r24, 0x04	; 4
     d58:	83 a3       	std	Z+35, r24	; 0x23
		twi->status = TWIS_STATUS_READY;
     d5a:	12 a2       	std	Z+34, r1	; 0x22
     d5c:	08 95       	ret
	}

	/* If transmit collision. */
	else if (currentStatus & TWI_SLAVE_COLL_bm) {
     d5e:	83 ff       	sbrs	r24, 3
     d60:	06 c0       	rjmp	.+12     	; 0xd6e <TWI_SlaveInterruptHandler+0x2a>
		twi->bytesReceived = 0;
     d62:	10 a2       	std	Z+32, r1	; 0x20
		twi->bytesSent = 0;
     d64:	11 a2       	std	Z+33, r1	; 0x21
		twi->result = TWIS_RESULT_TRANSMIT_COLLISION;
     d66:	83 e0       	ldi	r24, 0x03	; 3
     d68:	83 a3       	std	Z+35, r24	; 0x23
		twi->status = TWIS_STATUS_READY;
     d6a:	12 a2       	std	Z+34, r1	; 0x22
     d6c:	08 95       	ret
	}

	/* If address match. */
	else if ((currentStatus & TWI_SLAVE_APIF_bm) &&
     d6e:	28 2f       	mov	r18, r24
     d70:	20 74       	andi	r18, 0x40	; 64
     d72:	98 2f       	mov	r25, r24
     d74:	91 74       	andi	r25, 0x41	; 65
     d76:	91 34       	cpi	r25, 0x41	; 65
     d78:	21 f4       	brne	.+8      	; 0xd82 <TWI_SlaveInterruptHandler+0x3e>
	        (currentStatus & TWI_SLAVE_AP_bm)) {

		TWI_SlaveAddressMatchHandler(twi);
     d7a:	cf 01       	movw	r24, r30
     d7c:	0e 94 f6 05 	call	0xbec	; 0xbec <TWI_SlaveAddressMatchHandler>
     d80:	08 95       	ret
	}

	/* If stop (only enabled through slave read transaction). */
	else if (currentStatus & TWI_SLAVE_APIF_bm) {
     d82:	22 23       	and	r18, r18
     d84:	21 f0       	breq	.+8      	; 0xd8e <TWI_SlaveInterruptHandler+0x4a>
		TWI_SlaveStopHandler(twi);
     d86:	cf 01       	movw	r24, r30
     d88:	0e 94 17 06 	call	0xc2e	; 0xc2e <TWI_SlaveStopHandler>
     d8c:	08 95       	ret
	}

	/* If data interrupt. */
	else if (currentStatus & TWI_SLAVE_DIF_bm) {
     d8e:	88 23       	and	r24, r24
     d90:	24 f4       	brge	.+8      	; 0xd9a <TWI_SlaveInterruptHandler+0x56>
		TWI_SlaveDataHandler(twi);
     d92:	cf 01       	movw	r24, r30
     d94:	0e 94 96 06 	call	0xd2c	; 0xd2c <TWI_SlaveDataHandler>
     d98:	08 95       	ret
 *  \param twi    The TWI_Slave_t struct instance.
 *  \param result The result of the transaction.
 */
void TWI_SlaveTransactionFinished(TWI_Slave_t *twi, uint8_t result)
{
	twi->result = result;
     d9a:	85 e0       	ldi	r24, 0x05	; 5
     d9c:	83 a3       	std	Z+35, r24	; 0x23
	twi->status = TWIS_STATUS_READY;
     d9e:	12 a2       	std	Z+34, r1	; 0x22
     da0:	08 95       	ret

00000da2 <updateM0>:
		_delay_ms(40);
	}
}

void updateM0(int16_t targetVelocity)
{
     da2:	4f 92       	push	r4
     da4:	5f 92       	push	r5
     da6:	6f 92       	push	r6
     da8:	7f 92       	push	r7
     daa:	8f 92       	push	r8
     dac:	9f 92       	push	r9
     dae:	af 92       	push	r10
     db0:	bf 92       	push	r11
     db2:	cf 92       	push	r12
     db4:	df 92       	push	r13
     db6:	ef 92       	push	r14
     db8:	ff 92       	push	r15
     dba:	0f 93       	push	r16
     dbc:	1f 93       	push	r17
     dbe:	cf 93       	push	r28
     dc0:	df 93       	push	r29
     dc2:	cd b7       	in	r28, 0x3d	; 61
     dc4:	de b7       	in	r29, 0x3e	; 62
     dc6:	2c 97       	sbiw	r28, 0x0c	; 12
     dc8:	cd bf       	out	0x3d, r28	; 61
     dca:	de bf       	out	0x3e, r29	; 62
	static float integralTerm = 0;
	static float lastError = 0;

	//float currentVelocity = qdec_vel0();
	float currentVelocity = 0;
	float error = (float)targetVelocity - currentVelocity;
     dcc:	bc 01       	movw	r22, r24
     dce:	99 0f       	add	r25, r25
     dd0:	88 0b       	sbc	r24, r24
     dd2:	99 0b       	sbc	r25, r25
     dd4:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <__floatsisf>
     dd8:	6b 01       	movw	r12, r22
     dda:	7c 01       	movw	r14, r24
	integralTerm += error*dt;
     ddc:	2a e0       	ldi	r18, 0x0A	; 10
     dde:	37 ed       	ldi	r19, 0xD7	; 215
     de0:	43 e2       	ldi	r20, 0x23	; 35
     de2:	5d e3       	ldi	r21, 0x3D	; 61
     de4:	0e 94 15 0c 	call	0x182a	; 0x182a <__mulsf3>
     de8:	20 91 e0 21 	lds	r18, 0x21E0
     dec:	30 91 e1 21 	lds	r19, 0x21E1
     df0:	40 91 e2 21 	lds	r20, 0x21E2
     df4:	50 91 e3 21 	lds	r21, 0x21E3
     df8:	0e 94 45 0a 	call	0x148a	; 0x148a <__addsf3>
     dfc:	4b 01       	movw	r8, r22
     dfe:	5c 01       	movw	r10, r24
     e00:	60 93 e0 21 	sts	0x21E0, r22
     e04:	70 93 e1 21 	sts	0x21E1, r23
     e08:	80 93 e2 21 	sts	0x21E2, r24
     e0c:	90 93 e3 21 	sts	0x21E3, r25
	float derivativeTerm = (error - lastError) / dt;
     e10:	20 91 dc 21 	lds	r18, 0x21DC
     e14:	30 91 dd 21 	lds	r19, 0x21DD
     e18:	40 91 de 21 	lds	r20, 0x21DE
     e1c:	50 91 df 21 	lds	r21, 0x21DF
     e20:	c7 01       	movw	r24, r14
     e22:	b6 01       	movw	r22, r12
     e24:	0e 94 44 0a 	call	0x1488	; 0x1488 <__subsf3>
     e28:	2a e0       	ldi	r18, 0x0A	; 10
     e2a:	37 ed       	ldi	r19, 0xD7	; 215
     e2c:	43 e2       	ldi	r20, 0x23	; 35
     e2e:	5d e3       	ldi	r21, 0x3D	; 61
     e30:	0e 94 b6 0a 	call	0x156c	; 0x156c <__divsf3>
     e34:	69 87       	std	Y+9, r22	; 0x09
     e36:	7a 87       	std	Y+10, r23	; 0x0a
     e38:	8b 87       	std	Y+11, r24	; 0x0b
     e3a:	9c 87       	std	Y+12, r25	; 0x0c
	lastError = error;
     e3c:	c0 92 dc 21 	sts	0x21DC, r12
     e40:	d0 92 dd 21 	sts	0x21DD, r13
     e44:	e0 92 de 21 	sts	0x21DE, r14
     e48:	f0 92 df 21 	sts	0x21DF, r15

	float kp;
	float ki;
	if(error > 0)
     e4c:	20 e0       	ldi	r18, 0x00	; 0
     e4e:	30 e0       	ldi	r19, 0x00	; 0
     e50:	a9 01       	movw	r20, r18
     e52:	c7 01       	movw	r24, r14
     e54:	b6 01       	movw	r22, r12
     e56:	0e 94 10 0c 	call	0x1820	; 0x1820 <__gesf2>
     e5a:	18 16       	cp	r1, r24
     e5c:	d4 f4       	brge	.+52     	; 0xe92 <updateM0+0xf0>
	{
		//We should use the "A" constants
		kp = kp0_A[i2c_address];
     e5e:	80 91 e4 21 	lds	r24, 0x21E4
     e62:	90 e0       	ldi	r25, 0x00	; 0
     e64:	88 0f       	add	r24, r24
     e66:	99 1f       	adc	r25, r25
     e68:	88 0f       	add	r24, r24
     e6a:	99 1f       	adc	r25, r25
     e6c:	fc 01       	movw	r30, r24
     e6e:	ee 58       	subi	r30, 0x8E	; 142
     e70:	ff 4d       	sbci	r31, 0xDF	; 223
     e72:	20 81       	ld	r18, Z
     e74:	31 81       	ldd	r19, Z+1	; 0x01
     e76:	42 81       	ldd	r20, Z+2	; 0x02
     e78:	53 81       	ldd	r21, Z+3	; 0x03
     e7a:	2d 83       	std	Y+5, r18	; 0x05
     e7c:	3e 83       	std	Y+6, r19	; 0x06
     e7e:	4f 83       	std	Y+7, r20	; 0x07
     e80:	58 87       	std	Y+8, r21	; 0x08
		ki = ki0_A[i2c_address];
     e82:	fc 01       	movw	r30, r24
     e84:	ef 5d       	subi	r30, 0xDF	; 223
     e86:	fd 4d       	sbci	r31, 0xDD	; 221
     e88:	40 80       	ld	r4, Z
     e8a:	51 80       	ldd	r5, Z+1	; 0x01
     e8c:	62 80       	ldd	r6, Z+2	; 0x02
     e8e:	73 80       	ldd	r7, Z+3	; 0x03
     e90:	19 c0       	rjmp	.+50     	; 0xec4 <updateM0+0x122>
	}
	else
	{
		//Using the "B" constants
		kp = kp0_B[i2c_address];
     e92:	80 91 e4 21 	lds	r24, 0x21E4
     e96:	90 e0       	ldi	r25, 0x00	; 0
     e98:	88 0f       	add	r24, r24
     e9a:	99 1f       	adc	r25, r25
     e9c:	88 0f       	add	r24, r24
     e9e:	99 1f       	adc	r25, r25
     ea0:	fc 01       	movw	r30, r24
     ea2:	e2 5a       	subi	r30, 0xA2	; 162
     ea4:	ff 4d       	sbci	r31, 0xDF	; 223
     ea6:	20 81       	ld	r18, Z
     ea8:	31 81       	ldd	r19, Z+1	; 0x01
     eaa:	42 81       	ldd	r20, Z+2	; 0x02
     eac:	53 81       	ldd	r21, Z+3	; 0x03
     eae:	2d 83       	std	Y+5, r18	; 0x05
     eb0:	3e 83       	std	Y+6, r19	; 0x06
     eb2:	4f 83       	std	Y+7, r20	; 0x07
     eb4:	58 87       	std	Y+8, r21	; 0x08
		ki = ki0_B[i2c_address];
     eb6:	fc 01       	movw	r30, r24
     eb8:	e3 5f       	subi	r30, 0xF3	; 243
     eba:	fd 4d       	sbci	r31, 0xDD	; 221
     ebc:	40 80       	ld	r4, Z
     ebe:	51 80       	ldd	r5, Z+1	; 0x01
     ec0:	62 80       	ldd	r6, Z+2	; 0x02
     ec2:	73 80       	ldd	r7, Z+3	; 0x03
	}

	//Prevent crazy windup
	if(integralTerm > INTEGRAL_TERM_MAX/ki)
     ec4:	a3 01       	movw	r20, r6
     ec6:	92 01       	movw	r18, r4
     ec8:	60 e0       	ldi	r22, 0x00	; 0
     eca:	70 ef       	ldi	r23, 0xF0	; 240
     ecc:	8f e7       	ldi	r24, 0x7F	; 127
     ece:	95 e4       	ldi	r25, 0x45	; 69
     ed0:	0e 94 b6 0a 	call	0x156c	; 0x156c <__divsf3>
     ed4:	69 83       	std	Y+1, r22	; 0x01
     ed6:	7a 83       	std	Y+2, r23	; 0x02
     ed8:	8b 83       	std	Y+3, r24	; 0x03
     eda:	9c 83       	std	Y+4, r25	; 0x04
     edc:	9b 01       	movw	r18, r22
     ede:	ac 01       	movw	r20, r24
     ee0:	c5 01       	movw	r24, r10
     ee2:	b4 01       	movw	r22, r8
     ee4:	0e 94 10 0c 	call	0x1820	; 0x1820 <__gesf2>
     ee8:	18 16       	cp	r1, r24
     eea:	6c f4       	brge	.+26     	; 0xf06 <updateM0+0x164>
	{
	integralTerm = INTEGRAL_TERM_MAX/ki;
     eec:	89 81       	ldd	r24, Y+1	; 0x01
     eee:	9a 81       	ldd	r25, Y+2	; 0x02
     ef0:	ab 81       	ldd	r26, Y+3	; 0x03
     ef2:	bc 81       	ldd	r27, Y+4	; 0x04
     ef4:	80 93 e0 21 	sts	0x21E0, r24
     ef8:	90 93 e1 21 	sts	0x21E1, r25
     efc:	a0 93 e2 21 	sts	0x21E2, r26
     f00:	b0 93 e3 21 	sts	0x21E3, r27
     f04:	20 c0       	rjmp	.+64     	; 0xf46 <updateM0+0x1a4>
	}
	else if (integralTerm < -INTEGRAL_TERM_MAX/ki)
     f06:	a3 01       	movw	r20, r6
     f08:	92 01       	movw	r18, r4
     f0a:	60 e0       	ldi	r22, 0x00	; 0
     f0c:	70 ef       	ldi	r23, 0xF0	; 240
     f0e:	8f e7       	ldi	r24, 0x7F	; 127
     f10:	95 ec       	ldi	r25, 0xC5	; 197
     f12:	0e 94 b6 0a 	call	0x156c	; 0x156c <__divsf3>
     f16:	69 83       	std	Y+1, r22	; 0x01
     f18:	7a 83       	std	Y+2, r23	; 0x02
     f1a:	8b 83       	std	Y+3, r24	; 0x03
     f1c:	9c 83       	std	Y+4, r25	; 0x04
     f1e:	9b 01       	movw	r18, r22
     f20:	ac 01       	movw	r20, r24
     f22:	c5 01       	movw	r24, r10
     f24:	b4 01       	movw	r22, r8
     f26:	0e 94 b1 0a 	call	0x1562	; 0x1562 <__cmpsf2>
     f2a:	88 23       	and	r24, r24
     f2c:	64 f4       	brge	.+24     	; 0xf46 <updateM0+0x1a4>
	{
	integralTerm = -INTEGRAL_TERM_MAX/ki;
     f2e:	29 81       	ldd	r18, Y+1	; 0x01
     f30:	3a 81       	ldd	r19, Y+2	; 0x02
     f32:	4b 81       	ldd	r20, Y+3	; 0x03
     f34:	5c 81       	ldd	r21, Y+4	; 0x04
     f36:	20 93 e0 21 	sts	0x21E0, r18
     f3a:	30 93 e1 21 	sts	0x21E1, r19
     f3e:	40 93 e2 21 	sts	0x21E2, r20
     f42:	50 93 e3 21 	sts	0x21E3, r21
	}

	float kd = 0;
	int16_t magnitude = kp*error + kd*derivativeTerm + ki*integralTerm;
     f46:	a7 01       	movw	r20, r14
     f48:	96 01       	movw	r18, r12
     f4a:	6d 81       	ldd	r22, Y+5	; 0x05
     f4c:	7e 81       	ldd	r23, Y+6	; 0x06
     f4e:	8f 81       	ldd	r24, Y+7	; 0x07
     f50:	98 85       	ldd	r25, Y+8	; 0x08
     f52:	0e 94 15 0c 	call	0x182a	; 0x182a <__mulsf3>
     f56:	6b 01       	movw	r12, r22
     f58:	7c 01       	movw	r14, r24
     f5a:	20 e0       	ldi	r18, 0x00	; 0
     f5c:	30 e0       	ldi	r19, 0x00	; 0
     f5e:	a9 01       	movw	r20, r18
     f60:	69 85       	ldd	r22, Y+9	; 0x09
     f62:	7a 85       	ldd	r23, Y+10	; 0x0a
     f64:	8b 85       	ldd	r24, Y+11	; 0x0b
     f66:	9c 85       	ldd	r25, Y+12	; 0x0c
     f68:	0e 94 15 0c 	call	0x182a	; 0x182a <__mulsf3>
     f6c:	9b 01       	movw	r18, r22
     f6e:	ac 01       	movw	r20, r24
     f70:	c7 01       	movw	r24, r14
     f72:	b6 01       	movw	r22, r12
     f74:	0e 94 45 0a 	call	0x148a	; 0x148a <__addsf3>
     f78:	6b 01       	movw	r12, r22
     f7a:	7c 01       	movw	r14, r24
     f7c:	20 91 e0 21 	lds	r18, 0x21E0
     f80:	30 91 e1 21 	lds	r19, 0x21E1
     f84:	40 91 e2 21 	lds	r20, 0x21E2
     f88:	50 91 e3 21 	lds	r21, 0x21E3
     f8c:	c3 01       	movw	r24, r6
     f8e:	b2 01       	movw	r22, r4
     f90:	0e 94 15 0c 	call	0x182a	; 0x182a <__mulsf3>
     f94:	9b 01       	movw	r18, r22
     f96:	ac 01       	movw	r20, r24
     f98:	c7 01       	movw	r24, r14
     f9a:	b6 01       	movw	r22, r12
     f9c:	0e 94 45 0a 	call	0x148a	; 0x148a <__addsf3>
     fa0:	0e 94 28 0b 	call	0x1650	; 0x1650 <__fixsfsi>
     fa4:	61 30       	cpi	r22, 0x01	; 1
     fa6:	30 ef       	ldi	r19, 0xF0	; 240
     fa8:	73 07       	cpc	r23, r19
     faa:	14 f4       	brge	.+4      	; 0xfb0 <updateM0+0x20e>
     fac:	61 e0       	ldi	r22, 0x01	; 1
     fae:	70 ef       	ldi	r23, 0xF0	; 240
     fb0:	8b 01       	movw	r16, r22
     fb2:	61 15       	cp	r22, r1
     fb4:	70 41       	sbci	r23, 0x10	; 16
     fb6:	14 f0       	brlt	.+4      	; 0xfbc <updateM0+0x21a>
     fb8:	0f ef       	ldi	r16, 0xFF	; 255
     fba:	1f e0       	ldi	r17, 0x0F	; 15
	magnitude = -4095;
	}

	
	//make sure we are not trying to plow through a limit switch
	if((magnitude > 0) && atLimitA0())
     fbc:	10 16       	cp	r1, r16
     fbe:	11 06       	cpc	r1, r17
     fc0:	24 f4       	brge	.+8      	; 0xfca <updateM0+0x228>
     fc2:	0e 94 a8 03 	call	0x750	; 0x750 <atLimitA0>
     fc6:	81 11       	cpse	r24, r1
     fc8:	0f c0       	rjmp	.+30     	; 0xfe8 <updateM0+0x246>
	{
		magnitude = 0;
	}
	if((magnitude < 0) && atLimitB0())
     fca:	11 23       	and	r17, r17
     fcc:	0c f5       	brge	.+66     	; 0x1010 <updateM0+0x26e>
     fce:	0e 94 ad 03 	call	0x75a	; 0x75a <atLimitB0>
     fd2:	81 11       	cpse	r24, r1
     fd4:	1b c0       	rjmp	.+54     	; 0x100c <updateM0+0x26a>
	
	//int16_t valToDisplay = (int16_t)error;
	int16_t valToDisplay = magnitude;
	if(valToDisplay < 0)
	{
		valToDisplay *= -1;
     fd6:	88 27       	eor	r24, r24
     fd8:	99 27       	eor	r25, r25
     fda:	80 1b       	sub	r24, r16
     fdc:	91 0b       	sbc	r25, r17
		valToDisplay |= 0x80;
     fde:	e0 2e       	mov	r14, r16
     fe0:	f1 2e       	mov	r15, r17
     fe2:	8c 01       	movw	r16, r24
     fe4:	00 68       	ori	r16, 0x80	; 128
     fe6:	04 c0       	rjmp	.+8      	; 0xff0 <updateM0+0x24e>

	
	//make sure we are not trying to plow through a limit switch
	if((magnitude > 0) && atLimitA0())
	{
		magnitude = 0;
     fe8:	e1 2c       	mov	r14, r1
     fea:	f1 2c       	mov	r15, r1
     fec:	00 e0       	ldi	r16, 0x00	; 0
     fee:	10 e0       	ldi	r17, 0x00	; 0
	if(valToDisplay < 0)
	{
		valToDisplay *= -1;
		valToDisplay |= 0x80;
	}
	led_dataOut(valToDisplay);
     ff0:	80 2f       	mov	r24, r16
     ff2:	0e 94 98 03 	call	0x730	; 0x730 <led_dataOut>
	

	motor0_set(magnitude, stopBehavior0[i2c_address]);
     ff6:	e0 91 e4 21 	lds	r30, 0x21E4
     ffa:	f0 e0       	ldi	r31, 0x00	; 0
     ffc:	e7 5f       	subi	r30, 0xF7	; 247
     ffe:	ff 4d       	sbci	r31, 0xDF	; 223
    1000:	60 81       	ld	r22, Z
    1002:	8e 2d       	mov	r24, r14
    1004:	9f 2d       	mov	r25, r15
    1006:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <motor0_set>
    100a:	05 c0       	rjmp	.+10     	; 0x1016 <updateM0+0x274>
	{
		magnitude = 0;
	}
	if((magnitude < 0) && atLimitB0())
	{
		magnitude = 0;
    100c:	00 e0       	ldi	r16, 0x00	; 0
    100e:	10 e0       	ldi	r17, 0x00	; 0
	//int16_t valToDisplay = (int16_t)error;
	int16_t valToDisplay = magnitude;
	if(valToDisplay < 0)
	{
		valToDisplay *= -1;
		valToDisplay |= 0x80;
    1010:	e0 2e       	mov	r14, r16
    1012:	f1 2e       	mov	r15, r17
    1014:	ed cf       	rjmp	.-38     	; 0xff0 <updateM0+0x24e>
	}
	led_dataOut(valToDisplay);
	

	motor0_set(magnitude, stopBehavior0[i2c_address]);
}
    1016:	2c 96       	adiw	r28, 0x0c	; 12
    1018:	cd bf       	out	0x3d, r28	; 61
    101a:	de bf       	out	0x3e, r29	; 62
    101c:	df 91       	pop	r29
    101e:	cf 91       	pop	r28
    1020:	1f 91       	pop	r17
    1022:	0f 91       	pop	r16
    1024:	ff 90       	pop	r15
    1026:	ef 90       	pop	r14
    1028:	df 90       	pop	r13
    102a:	cf 90       	pop	r12
    102c:	bf 90       	pop	r11
    102e:	af 90       	pop	r10
    1030:	9f 90       	pop	r9
    1032:	8f 90       	pop	r8
    1034:	7f 90       	pop	r7
    1036:	6f 90       	pop	r6
    1038:	5f 90       	pop	r5
    103a:	4f 90       	pop	r4
    103c:	08 95       	ret

0000103e <updateM1>:

void updateM1(int16_t targetVelocity)
{
    103e:	4f 92       	push	r4
    1040:	5f 92       	push	r5
    1042:	6f 92       	push	r6
    1044:	7f 92       	push	r7
    1046:	8f 92       	push	r8
    1048:	9f 92       	push	r9
    104a:	af 92       	push	r10
    104c:	bf 92       	push	r11
    104e:	cf 92       	push	r12
    1050:	df 92       	push	r13
    1052:	ef 92       	push	r14
    1054:	ff 92       	push	r15
    1056:	0f 93       	push	r16
    1058:	1f 93       	push	r17
    105a:	cf 93       	push	r28
    105c:	df 93       	push	r29
    105e:	cd b7       	in	r28, 0x3d	; 61
    1060:	de b7       	in	r29, 0x3e	; 62
    1062:	28 97       	sbiw	r28, 0x08	; 8
    1064:	cd bf       	out	0x3d, r28	; 61
    1066:	de bf       	out	0x3e, r29	; 62
	static float integralTerm = 0;

	//float currentVelocity = qdec_vel1();
	float currentVelocity = 0;
	float error = (float)targetVelocity - currentVelocity;
    1068:	bc 01       	movw	r22, r24
    106a:	99 0f       	add	r25, r25
    106c:	88 0b       	sbc	r24, r24
    106e:	99 0b       	sbc	r25, r25
    1070:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <__floatsisf>
    1074:	69 83       	std	Y+1, r22	; 0x01
    1076:	7a 83       	std	Y+2, r23	; 0x02
    1078:	8b 83       	std	Y+3, r24	; 0x03
    107a:	9c 83       	std	Y+4, r25	; 0x04
	integralTerm += error*dt;
    107c:	2a e0       	ldi	r18, 0x0A	; 10
    107e:	37 ed       	ldi	r19, 0xD7	; 215
    1080:	43 e2       	ldi	r20, 0x23	; 35
    1082:	5d e3       	ldi	r21, 0x3D	; 61
    1084:	0e 94 15 0c 	call	0x182a	; 0x182a <__mulsf3>
    1088:	20 91 d8 21 	lds	r18, 0x21D8
    108c:	30 91 d9 21 	lds	r19, 0x21D9
    1090:	40 91 da 21 	lds	r20, 0x21DA
    1094:	50 91 db 21 	lds	r21, 0x21DB
    1098:	0e 94 45 0a 	call	0x148a	; 0x148a <__addsf3>
    109c:	4b 01       	movw	r8, r22
    109e:	5c 01       	movw	r10, r24
    10a0:	60 93 d8 21 	sts	0x21D8, r22
    10a4:	70 93 d9 21 	sts	0x21D9, r23
    10a8:	80 93 da 21 	sts	0x21DA, r24
    10ac:	90 93 db 21 	sts	0x21DB, r25

	float kp;
	float ki;
	if(error > 0)
    10b0:	20 e0       	ldi	r18, 0x00	; 0
    10b2:	30 e0       	ldi	r19, 0x00	; 0
    10b4:	a9 01       	movw	r20, r18
    10b6:	69 81       	ldd	r22, Y+1	; 0x01
    10b8:	7a 81       	ldd	r23, Y+2	; 0x02
    10ba:	8b 81       	ldd	r24, Y+3	; 0x03
    10bc:	9c 81       	ldd	r25, Y+4	; 0x04
    10be:	0e 94 10 0c 	call	0x1820	; 0x1820 <__gesf2>
    10c2:	18 16       	cp	r1, r24
    10c4:	b4 f4       	brge	.+44     	; 0x10f2 <updateM1+0xb4>
	{
		//We should use the "A" constants
		kp = kp1_A[i2c_address];
    10c6:	80 91 e4 21 	lds	r24, 0x21E4
    10ca:	90 e0       	ldi	r25, 0x00	; 0
    10cc:	88 0f       	add	r24, r24
    10ce:	99 1f       	adc	r25, r25
    10d0:	88 0f       	add	r24, r24
    10d2:	99 1f       	adc	r25, r25
    10d4:	fc 01       	movw	r30, r24
    10d6:	e6 5b       	subi	r30, 0xB6	; 182
    10d8:	ff 4d       	sbci	r31, 0xDF	; 223
    10da:	40 80       	ld	r4, Z
    10dc:	51 80       	ldd	r5, Z+1	; 0x01
    10de:	62 80       	ldd	r6, Z+2	; 0x02
    10e0:	73 80       	ldd	r7, Z+3	; 0x03
		ki = ki1_A[i2c_address];
    10e2:	fc 01       	movw	r30, r24
    10e4:	e7 50       	subi	r30, 0x07	; 7
    10e6:	fe 4d       	sbci	r31, 0xDE	; 222
    10e8:	c0 80       	ld	r12, Z
    10ea:	d1 80       	ldd	r13, Z+1	; 0x01
    10ec:	e2 80       	ldd	r14, Z+2	; 0x02
    10ee:	f3 80       	ldd	r15, Z+3	; 0x03
    10f0:	15 c0       	rjmp	.+42     	; 0x111c <updateM1+0xde>
	}
	else
	{
		//Using the "B" constants
		kp = kp1_B[i2c_address];
    10f2:	80 91 e4 21 	lds	r24, 0x21E4
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	88 0f       	add	r24, r24
    10fa:	99 1f       	adc	r25, r25
    10fc:	88 0f       	add	r24, r24
    10fe:	99 1f       	adc	r25, r25
    1100:	fc 01       	movw	r30, r24
    1102:	ea 5c       	subi	r30, 0xCA	; 202
    1104:	ff 4d       	sbci	r31, 0xDF	; 223
    1106:	40 80       	ld	r4, Z
    1108:	51 80       	ldd	r5, Z+1	; 0x01
    110a:	62 80       	ldd	r6, Z+2	; 0x02
    110c:	73 80       	ldd	r7, Z+3	; 0x03
		ki = ki1_B[i2c_address];
    110e:	fc 01       	movw	r30, r24
    1110:	eb 51       	subi	r30, 0x1B	; 27
    1112:	fe 4d       	sbci	r31, 0xDE	; 222
    1114:	c0 80       	ld	r12, Z
    1116:	d1 80       	ldd	r13, Z+1	; 0x01
    1118:	e2 80       	ldd	r14, Z+2	; 0x02
    111a:	f3 80       	ldd	r15, Z+3	; 0x03
	}

	//Prevent crazy windup
	if(integralTerm > INTEGRAL_TERM_MAX/ki)
    111c:	a7 01       	movw	r20, r14
    111e:	96 01       	movw	r18, r12
    1120:	60 e0       	ldi	r22, 0x00	; 0
    1122:	70 ef       	ldi	r23, 0xF0	; 240
    1124:	8f e7       	ldi	r24, 0x7F	; 127
    1126:	95 e4       	ldi	r25, 0x45	; 69
    1128:	0e 94 b6 0a 	call	0x156c	; 0x156c <__divsf3>
    112c:	6d 83       	std	Y+5, r22	; 0x05
    112e:	7e 83       	std	Y+6, r23	; 0x06
    1130:	8f 83       	std	Y+7, r24	; 0x07
    1132:	98 87       	std	Y+8, r25	; 0x08
    1134:	9b 01       	movw	r18, r22
    1136:	ac 01       	movw	r20, r24
    1138:	c5 01       	movw	r24, r10
    113a:	b4 01       	movw	r22, r8
    113c:	0e 94 10 0c 	call	0x1820	; 0x1820 <__gesf2>
    1140:	18 16       	cp	r1, r24
    1142:	6c f4       	brge	.+26     	; 0x115e <updateM1+0x120>
	{
		integralTerm = INTEGRAL_TERM_MAX/ki;
    1144:	8d 81       	ldd	r24, Y+5	; 0x05
    1146:	9e 81       	ldd	r25, Y+6	; 0x06
    1148:	af 81       	ldd	r26, Y+7	; 0x07
    114a:	b8 85       	ldd	r27, Y+8	; 0x08
    114c:	80 93 d8 21 	sts	0x21D8, r24
    1150:	90 93 d9 21 	sts	0x21D9, r25
    1154:	a0 93 da 21 	sts	0x21DA, r26
    1158:	b0 93 db 21 	sts	0x21DB, r27
    115c:	20 c0       	rjmp	.+64     	; 0x119e <updateM1+0x160>
	}
	else if (integralTerm < -INTEGRAL_TERM_MAX/ki)
    115e:	a7 01       	movw	r20, r14
    1160:	96 01       	movw	r18, r12
    1162:	60 e0       	ldi	r22, 0x00	; 0
    1164:	70 ef       	ldi	r23, 0xF0	; 240
    1166:	8f e7       	ldi	r24, 0x7F	; 127
    1168:	95 ec       	ldi	r25, 0xC5	; 197
    116a:	0e 94 b6 0a 	call	0x156c	; 0x156c <__divsf3>
    116e:	6d 83       	std	Y+5, r22	; 0x05
    1170:	7e 83       	std	Y+6, r23	; 0x06
    1172:	8f 83       	std	Y+7, r24	; 0x07
    1174:	98 87       	std	Y+8, r25	; 0x08
    1176:	9b 01       	movw	r18, r22
    1178:	ac 01       	movw	r20, r24
    117a:	c5 01       	movw	r24, r10
    117c:	b4 01       	movw	r22, r8
    117e:	0e 94 b1 0a 	call	0x1562	; 0x1562 <__cmpsf2>
    1182:	88 23       	and	r24, r24
    1184:	64 f4       	brge	.+24     	; 0x119e <updateM1+0x160>
	{
		integralTerm = -INTEGRAL_TERM_MAX/ki;
    1186:	8d 81       	ldd	r24, Y+5	; 0x05
    1188:	9e 81       	ldd	r25, Y+6	; 0x06
    118a:	af 81       	ldd	r26, Y+7	; 0x07
    118c:	b8 85       	ldd	r27, Y+8	; 0x08
    118e:	80 93 d8 21 	sts	0x21D8, r24
    1192:	90 93 d9 21 	sts	0x21D9, r25
    1196:	a0 93 da 21 	sts	0x21DA, r26
    119a:	b0 93 db 21 	sts	0x21DB, r27
	}

	int16_t magnitude = kp*error + ki*integralTerm;
    119e:	29 81       	ldd	r18, Y+1	; 0x01
    11a0:	3a 81       	ldd	r19, Y+2	; 0x02
    11a2:	4b 81       	ldd	r20, Y+3	; 0x03
    11a4:	5c 81       	ldd	r21, Y+4	; 0x04
    11a6:	c3 01       	movw	r24, r6
    11a8:	b2 01       	movw	r22, r4
    11aa:	0e 94 15 0c 	call	0x182a	; 0x182a <__mulsf3>
    11ae:	4b 01       	movw	r8, r22
    11b0:	5c 01       	movw	r10, r24
    11b2:	20 91 d8 21 	lds	r18, 0x21D8
    11b6:	30 91 d9 21 	lds	r19, 0x21D9
    11ba:	40 91 da 21 	lds	r20, 0x21DA
    11be:	50 91 db 21 	lds	r21, 0x21DB
    11c2:	c7 01       	movw	r24, r14
    11c4:	b6 01       	movw	r22, r12
    11c6:	0e 94 15 0c 	call	0x182a	; 0x182a <__mulsf3>
    11ca:	9b 01       	movw	r18, r22
    11cc:	ac 01       	movw	r20, r24
    11ce:	c5 01       	movw	r24, r10
    11d0:	b4 01       	movw	r22, r8
    11d2:	0e 94 45 0a 	call	0x148a	; 0x148a <__addsf3>
    11d6:	0e 94 28 0b 	call	0x1650	; 0x1650 <__fixsfsi>
    11da:	61 30       	cpi	r22, 0x01	; 1
    11dc:	90 ef       	ldi	r25, 0xF0	; 240
    11de:	79 07       	cpc	r23, r25
    11e0:	14 f4       	brge	.+4      	; 0x11e6 <updateM1+0x1a8>
    11e2:	61 e0       	ldi	r22, 0x01	; 1
    11e4:	70 ef       	ldi	r23, 0xF0	; 240
    11e6:	8b 01       	movw	r16, r22
    11e8:	61 15       	cp	r22, r1
    11ea:	70 41       	sbci	r23, 0x10	; 16
    11ec:	14 f0       	brlt	.+4      	; 0x11f2 <updateM1+0x1b4>
    11ee:	0f ef       	ldi	r16, 0xFF	; 255
    11f0:	1f e0       	ldi	r17, 0x0F	; 15
	{
		magnitude = -4095;
	}

	
	if((magnitude > 0) && atLimitA1())
    11f2:	10 16       	cp	r1, r16
    11f4:	11 06       	cpc	r1, r17
    11f6:	24 f4       	brge	.+8      	; 0x1200 <updateM1+0x1c2>
    11f8:	0e 94 b2 03 	call	0x764	; 0x764 <atLimitA1>
    11fc:	81 11       	cpse	r24, r1
    11fe:	09 c0       	rjmp	.+18     	; 0x1212 <updateM1+0x1d4>
	{
		magnitude = 0;
	}
	if((magnitude < 0) && atLimitB1())
    1200:	11 23       	and	r17, r17
    1202:	4c f4       	brge	.+18     	; 0x1216 <updateM1+0x1d8>
    1204:	0e 94 b7 03 	call	0x76e	; 0x76e <atLimitB1>
    1208:	88 23       	and	r24, r24
    120a:	29 f0       	breq	.+10     	; 0x1216 <updateM1+0x1d8>
	{
		magnitude = 0;
    120c:	00 e0       	ldi	r16, 0x00	; 0
    120e:	10 e0       	ldi	r17, 0x00	; 0
    1210:	02 c0       	rjmp	.+4      	; 0x1216 <updateM1+0x1d8>
	}

	
	if((magnitude > 0) && atLimitA1())
	{
		magnitude = 0;
    1212:	00 e0       	ldi	r16, 0x00	; 0
    1214:	10 e0       	ldi	r17, 0x00	; 0
	//	valToDisplay *= -1;
	//	valToDisplay |= 0x80;
	//}
	//led_dataOut(valToDisplay);

	motor1_set(magnitude, stopBehavior1[i2c_address]);
    1216:	e0 91 e4 21 	lds	r30, 0x21E4
    121a:	f0 e0       	ldi	r31, 0x00	; 0
    121c:	ec 5f       	subi	r30, 0xFC	; 252
    121e:	ff 4d       	sbci	r31, 0xDF	; 223
    1220:	60 81       	ld	r22, Z
    1222:	c8 01       	movw	r24, r16
    1224:	0e 94 3d 04 	call	0x87a	; 0x87a <motor1_set>
}
    1228:	28 96       	adiw	r28, 0x08	; 8
    122a:	cd bf       	out	0x3d, r28	; 61
    122c:	de bf       	out	0x3e, r29	; 62
    122e:	df 91       	pop	r29
    1230:	cf 91       	pop	r28
    1232:	1f 91       	pop	r17
    1234:	0f 91       	pop	r16
    1236:	ff 90       	pop	r15
    1238:	ef 90       	pop	r14
    123a:	df 90       	pop	r13
    123c:	cf 90       	pop	r12
    123e:	bf 90       	pop	r11
    1240:	af 90       	pop	r10
    1242:	9f 90       	pop	r9
    1244:	8f 90       	pop	r8
    1246:	7f 90       	pop	r7
    1248:	6f 90       	pop	r6
    124a:	5f 90       	pop	r5
    124c:	4f 90       	pop	r4
    124e:	08 95       	ret

00001250 <displayCommands>:

void displayCommands(int16_t target0, int16_t target1)
{
    1250:	ac 01       	movw	r20, r24
    1252:	99 23       	and	r25, r25
    1254:	24 f4       	brge	.+8      	; 0x125e <displayCommands+0xe>
    1256:	44 27       	eor	r20, r20
    1258:	55 27       	eor	r21, r21
    125a:	48 1b       	sub	r20, r24
    125c:	59 0b       	sbc	r21, r25
    125e:	9b 01       	movw	r18, r22
    1260:	77 23       	and	r23, r23
    1262:	24 f4       	brge	.+8      	; 0x126c <displayCommands+0x1c>
    1264:	22 27       	eor	r18, r18
    1266:	33 27       	eor	r19, r19
    1268:	26 1b       	sub	r18, r22
    126a:	37 0b       	sbc	r19, r23
		target1 *= -1;
	}

	uint8_t ledMask = 0;

	if(target0 > 0)
    126c:	81 e0       	ldi	r24, 0x01	; 1
    126e:	14 16       	cp	r1, r20
    1270:	15 06       	cpc	r1, r21
    1272:	0c f0       	brlt	.+2      	; 0x1276 <displayCommands+0x26>
    1274:	80 e0       	ldi	r24, 0x00	; 0
	{
		ledMask |= 0x01;
	}
	if(target0 > 40)
    1276:	49 32       	cpi	r20, 0x29	; 41
    1278:	51 05       	cpc	r21, r1
    127a:	0c f0       	brlt	.+2      	; 0x127e <displayCommands+0x2e>
	{
		ledMask |= 0x02;
    127c:	82 60       	ori	r24, 0x02	; 2
	}
	if(target0 > 80)
    127e:	41 35       	cpi	r20, 0x51	; 81
    1280:	51 05       	cpc	r21, r1
    1282:	0c f0       	brlt	.+2      	; 0x1286 <displayCommands+0x36>
	{
		ledMask |= 0x04;
    1284:	84 60       	ori	r24, 0x04	; 4
	}
	if(target0 > 120)
    1286:	49 37       	cpi	r20, 0x79	; 121
    1288:	51 05       	cpc	r21, r1
    128a:	0c f0       	brlt	.+2      	; 0x128e <displayCommands+0x3e>
	{
		ledMask |= 0x08;
    128c:	88 60       	ori	r24, 0x08	; 8
	}

	if(target1 > 0)
    128e:	12 16       	cp	r1, r18
    1290:	13 06       	cpc	r1, r19
    1292:	0c f4       	brge	.+2      	; 0x1296 <displayCommands+0x46>
	{
		ledMask |= 0x10;
    1294:	80 61       	ori	r24, 0x10	; 16
	}
	if(target1 > 40)
    1296:	29 32       	cpi	r18, 0x29	; 41
    1298:	31 05       	cpc	r19, r1
    129a:	0c f0       	brlt	.+2      	; 0x129e <displayCommands+0x4e>
	{
		ledMask |= 0x20;
    129c:	80 62       	ori	r24, 0x20	; 32
	}
	if(target1 > 80)
    129e:	21 35       	cpi	r18, 0x51	; 81
    12a0:	31 05       	cpc	r19, r1
    12a2:	0c f0       	brlt	.+2      	; 0x12a6 <displayCommands+0x56>
	{
		ledMask |= 0x40;
    12a4:	80 64       	ori	r24, 0x40	; 64
	}
	if(target1 > 120)
    12a6:	29 37       	cpi	r18, 0x79	; 121
    12a8:	31 05       	cpc	r19, r1
    12aa:	0c f0       	brlt	.+2      	; 0x12ae <displayCommands+0x5e>
	{
		ledMask |= 0x80;
    12ac:	80 68       	ori	r24, 0x80	; 128
	}

	led_dataOut(ledMask);
    12ae:	0e 94 98 03 	call	0x730	; 0x730 <led_dataOut>
    12b2:	08 95       	ret

000012b4 <main>:

static const float dt = 0.040; //delay in each loop
static uint8_t i2c_address;

int main(void)
{
    12b4:	cf 93       	push	r28
    12b6:	df 93       	push	r29
    12b8:	cd b7       	in	r28, 0x3d	; 61
    12ba:	de b7       	in	r29, 0x3e	; 62
    12bc:	a0 97       	sbiw	r28, 0x20	; 32
    12be:	cd bf       	out	0x3d, r28	; 61
    12c0:	de bf       	out	0x3e, r29	; 62
	sysClock_set32();
    12c2:	0e 94 cb 05 	call	0xb96	; 0xb96 <sysClock_set32>

	led_init();
    12c6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <led_init>
	motor_init();
    12ca:	0e 94 bc 03 	call	0x778	; 0x778 <motor_init>
	idHeader_init();
    12ce:	0e 94 68 03 	call	0x6d0	; 0x6d0 <idHeader_init>
	limitSwitch_init();
    12d2:	0e 94 9c 03 	call	0x738	; 0x738 <limitSwitch_init>

	i2c_address = ADDRESS_DEFAULT;
    12d6:	84 e0       	ldi	r24, 0x04	; 4
    12d8:	80 93 e4 21 	sts	0x21E4, r24
	if(idHeader_getValue() != 0)
    12dc:	0e 94 74 03 	call	0x6e8	; 0x6e8 <idHeader_getValue>
    12e0:	88 23       	and	r24, r24
    12e2:	21 f0       	breq	.+8      	; 0x12ec <main+0x38>
	{
		i2c_address = idHeader_getValue();
    12e4:	0e 94 74 03 	call	0x6e8	; 0x6e8 <idHeader_getValue>
    12e8:	80 93 e4 21 	sts	0x21E4, r24
	}

	qdec_init(cpr0[i2c_address], cpr1[i2c_address]);
    12ec:	80 91 e4 21 	lds	r24, 0x21E4
    12f0:	90 e0       	ldi	r25, 0x00	; 0
    12f2:	88 0f       	add	r24, r24
    12f4:	99 1f       	adc	r25, r25
    12f6:	88 0f       	add	r24, r24
    12f8:	99 1f       	adc	r25, r25
    12fa:	fc 01       	movw	r30, r24
    12fc:	e2 5f       	subi	r30, 0xF2	; 242
    12fe:	ff 4d       	sbci	r31, 0xDF	; 223
    1300:	60 81       	ld	r22, Z
    1302:	71 81       	ldd	r23, Z+1	; 0x01
    1304:	fc 01       	movw	r30, r24
    1306:	ee 5d       	subi	r30, 0xDE	; 222
    1308:	ff 4d       	sbci	r31, 0xDF	; 223
    130a:	80 81       	ld	r24, Z
    130c:	91 81       	ldd	r25, Z+1	; 0x01
    130e:	0e 94 a2 04 	call	0x944	; 0x944 <qdec_init>
	i2cAPI_init(i2c_address);
    1312:	80 91 e4 21 	lds	r24, 0x21E4
    1316:	0e 94 92 01 	call	0x324	; 0x324 <i2cAPI_init>
	led_dataOut(i2c_address);
    131a:	80 91 e4 21 	lds	r24, 0x21E4
    131e:	0e 94 98 03 	call	0x730	; 0x730 <led_dataOut>
	
	PMIC.CTRL |= PMIC_LOLVLEN_bm;
    1322:	e0 ea       	ldi	r30, 0xA0	; 160
    1324:	f0 e0       	ldi	r31, 0x00	; 0
    1326:	82 81       	ldd	r24, Z+2	; 0x02
    1328:	81 60       	ori	r24, 0x01	; 1
    132a:	82 83       	std	Z+2, r24	; 0x02
	sei();
    132c:	78 94       	sei
    132e:	16 e0       	ldi	r17, 0x06	; 6

	for(uint8_t i = 0; i < 6; i ++)
	{
		led_aliveToggle();
    1330:	0e 94 94 03 	call	0x728	; 0x728 <led_aliveToggle>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1334:	2f ef       	ldi	r18, 0xFF	; 255
    1336:	83 ec       	ldi	r24, 0xC3	; 195
    1338:	99 e0       	ldi	r25, 0x09	; 9
    133a:	21 50       	subi	r18, 0x01	; 1
    133c:	80 40       	sbci	r24, 0x00	; 0
    133e:	90 40       	sbci	r25, 0x00	; 0
    1340:	e1 f7       	brne	.-8      	; 0x133a <main+0x86>
    1342:	00 c0       	rjmp	.+0      	; 0x1344 <main+0x90>
    1344:	00 00       	nop
    1346:	11 50       	subi	r17, 0x01	; 1
	led_dataOut(i2c_address);
	
	PMIC.CTRL |= PMIC_LOLVLEN_bm;
	sei();

	for(uint8_t i = 0; i < 6; i ++)
    1348:	99 f7       	brne	.-26     	; 0x1330 <main+0x7c>
	uint8_t delayCounter = 25;
	uint8_t cmdCounter = 0;

	//The packet returned by the controller if requested
	struct packet returnPacket;
	returnPacket.cmd = 66;
    134a:	82 e4       	ldi	r24, 0x42	; 66
    134c:	89 83       	std	Y+1, r24	; 0x01
	returnPacket.buffer[0] = 0;
    134e:	1a 82       	std	Y+2, r1	; 0x02
	returnPacket.buffer[1] = 0;
    1350:	1b 82       	std	Y+3, r1	; 0x03
	i2cAPI_setReturnPacket(&returnPacket, 3);
    1352:	63 e0       	ldi	r22, 0x03	; 3
    1354:	ce 01       	movw	r24, r28
    1356:	01 96       	adiw	r24, 0x01	; 1
    1358:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <i2cAPI_setReturnPacket>
	int16_t targetVelocity0 = 0;
	int16_t targetVelocity1 = 0;

	//Variables to track the led's
	uint8_t delayCounter = 25;
	uint8_t cmdCounter = 0;
    135c:	00 e0       	ldi	r16, 0x00	; 0

	int16_t targetVelocity0 = 0;
	int16_t targetVelocity1 = 0;

	//Variables to track the led's
	uint8_t delayCounter = 25;
    135e:	19 e1       	ldi	r17, 0x19	; 25
		led_aliveToggle();
		_delay_ms(100);
	}

	int16_t targetVelocity0 = 0;
	int16_t targetVelocity1 = 0;
    1360:	c1 2c       	mov	r12, r1
    1362:	d1 2c       	mov	r13, r1
	{
		led_aliveToggle();
		_delay_ms(100);
	}

	int16_t targetVelocity0 = 0;
    1364:	e1 2c       	mov	r14, r1
    1366:	f1 2c       	mov	r15, r1
		{
				displayCommands(targetVelocity0, targetVelocity1);
		}
		

		returnPacket.cmd = 66;
    1368:	0f 2e       	mov	r0, r31
    136a:	f2 e4       	ldi	r31, 0x42	; 66
    136c:	bf 2e       	mov	r11, r31
    136e:	f0 2d       	mov	r31, r0
	returnPacket.buffer[1] = 0;
	i2cAPI_setReturnPacket(&returnPacket, 3);

    while (1) 
    {
		i2cAPI_resetIfBusHogging();
    1370:	0e 94 3a 03 	call	0x674	; 0x674 <i2cAPI_resetIfBusHogging>
		i2cAPI_checkForPackets();
    1374:	0e 94 a4 01 	call	0x348	; 0x348 <i2cAPI_checkForPackets>
		if(i2cAPI_hasPacket())
    1378:	0e 94 c7 02 	call	0x58e	; 0x58e <i2cAPI_hasPacket>
    137c:	88 23       	and	r24, r24
    137e:	89 f1       	breq	.+98     	; 0x13e2 <main+0x12e>
		{
			struct packet receivedPacket;
			i2cAPI_getPacket(&receivedPacket);
    1380:	ce 01       	movw	r24, r28
    1382:	41 96       	adiw	r24, 0x11	; 17
    1384:	0e 94 ca 02 	call	0x594	; 0x594 <i2cAPI_getPacket>

			switch(receivedPacket.cmd)
    1388:	89 89       	ldd	r24, Y+17	; 0x11
    138a:	82 30       	cpi	r24, 0x02	; 2
    138c:	21 f1       	breq	.+72     	; 0x13d6 <main+0x122>
    138e:	18 f4       	brcc	.+6      	; 0x1396 <main+0xe2>
    1390:	81 30       	cpi	r24, 0x01	; 1
    1392:	f1 f0       	breq	.+60     	; 0x13d0 <main+0x11c>
    1394:	26 c0       	rjmp	.+76     	; 0x13e2 <main+0x12e>
    1396:	84 30       	cpi	r24, 0x04	; 4
    1398:	19 f0       	breq	.+6      	; 0x13a0 <main+0xec>
    139a:	85 30       	cpi	r24, 0x05	; 5
    139c:	69 f0       	breq	.+26     	; 0x13b8 <main+0x104>
    139e:	21 c0       	rjmp	.+66     	; 0x13e2 <main+0x12e>
			{
				case CMD_SET_VEL0:
					led_cmdOn();
    13a0:	0e 94 84 03 	call	0x708	; 0x708 <led_cmdOn>
					cmdCounter = 2;
					targetVelocity0 = receivedPacket.buffer[0];
    13a4:	ea 88       	ldd	r14, Y+18	; 0x12
    13a6:	f1 2c       	mov	r15, r1
					if(receivedPacket.buffer[1] == 1)
    13a8:	8b 89       	ldd	r24, Y+19	; 0x13
    13aa:	81 30       	cpi	r24, 0x01	; 1
    13ac:	b9 f4       	brne	.+46     	; 0x13dc <main+0x128>
					{
						targetVelocity0 *= -1;
    13ae:	f1 94       	neg	r15
    13b0:	e1 94       	neg	r14
    13b2:	f1 08       	sbc	r15, r1

			switch(receivedPacket.cmd)
			{
				case CMD_SET_VEL0:
					led_cmdOn();
					cmdCounter = 2;
    13b4:	02 e0       	ldi	r16, 0x02	; 2
    13b6:	15 c0       	rjmp	.+42     	; 0x13e2 <main+0x12e>
					{
						targetVelocity0 *= -1;
					}
					break;
				case CMD_SET_VEL1:
					led_cmdOn();
    13b8:	0e 94 84 03 	call	0x708	; 0x708 <led_cmdOn>
					cmdCounter = 2;
					targetVelocity1 = receivedPacket.buffer[0];
    13bc:	ca 88       	ldd	r12, Y+18	; 0x12
    13be:	d1 2c       	mov	r13, r1
					if(receivedPacket.buffer[1] == 1)
    13c0:	8b 89       	ldd	r24, Y+19	; 0x13
    13c2:	81 30       	cpi	r24, 0x01	; 1
    13c4:	69 f4       	brne	.+26     	; 0x13e0 <main+0x12c>
					{
						targetVelocity1 *= -1;
    13c6:	d1 94       	neg	r13
    13c8:	c1 94       	neg	r12
    13ca:	d1 08       	sbc	r13, r1
						targetVelocity0 *= -1;
					}
					break;
				case CMD_SET_VEL1:
					led_cmdOn();
					cmdCounter = 2;
    13cc:	02 e0       	ldi	r16, 0x02	; 2
    13ce:	09 c0       	rjmp	.+18     	; 0x13e2 <main+0x12e>
					{
						targetVelocity1 *= -1;
					}
				break;
				case CMD_PING_ON:
					led_pingOn();
    13d0:	0e 94 8c 03 	call	0x718	; 0x718 <led_pingOn>
					break;
    13d4:	06 c0       	rjmp	.+12     	; 0x13e2 <main+0x12e>
				case CMD_PING_OFF:
					led_pingOff();
    13d6:	0e 94 90 03 	call	0x720	; 0x720 <led_pingOff>
					break;
    13da:	03 c0       	rjmp	.+6      	; 0x13e2 <main+0x12e>

			switch(receivedPacket.cmd)
			{
				case CMD_SET_VEL0:
					led_cmdOn();
					cmdCounter = 2;
    13dc:	02 e0       	ldi	r16, 0x02	; 2
    13de:	01 c0       	rjmp	.+2      	; 0x13e2 <main+0x12e>
						targetVelocity0 *= -1;
					}
					break;
				case CMD_SET_VEL1:
					led_cmdOn();
					cmdCounter = 2;
    13e0:	02 e0       	ldi	r16, 0x02	; 2




		/// Begin Speed Control Code ///
		updateM0(targetVelocity0);
    13e2:	c7 01       	movw	r24, r14
    13e4:	0e 94 d1 06 	call	0xda2	; 0xda2 <updateM0>
		updateM1(targetVelocity1);
    13e8:	c6 01       	movw	r24, r12
    13ea:	0e 94 1f 08 	call	0x103e	; 0x103e <updateM1>

		if(i2c_address == ADDRESS_DEFAULT)
    13ee:	80 91 e4 21 	lds	r24, 0x21E4
    13f2:	84 30       	cpi	r24, 0x04	; 4
    13f4:	01 f5       	brne	.+64     	; 0x1436 <main+0x182>
		{
			//If no header, test the limit switches
			uint8_t outMask = 0;
			if(atLimitA0())
    13f6:	0e 94 a8 03 	call	0x750	; 0x750 <atLimitA0>
    13fa:	aa 24       	eor	r10, r10
    13fc:	a3 94       	inc	r10
    13fe:	81 11       	cpse	r24, r1
    1400:	01 c0       	rjmp	.+2      	; 0x1404 <main+0x150>
    1402:	a1 2c       	mov	r10, r1
			{
				outMask |= 0x01;
			}
			if(atLimitB0())
    1404:	0e 94 ad 03 	call	0x75a	; 0x75a <atLimitB0>
    1408:	88 23       	and	r24, r24
    140a:	19 f0       	breq	.+6      	; 0x1412 <main+0x15e>
			{
				outMask |= 0x02;
    140c:	2a 2d       	mov	r18, r10
    140e:	22 60       	ori	r18, 0x02	; 2
    1410:	a2 2e       	mov	r10, r18
			}
			if(atLimitA1())
    1412:	0e 94 b2 03 	call	0x764	; 0x764 <atLimitA1>
    1416:	88 23       	and	r24, r24
    1418:	19 f0       	breq	.+6      	; 0x1420 <main+0x16c>
			{
				outMask |= 0x04;
    141a:	8a 2d       	mov	r24, r10
    141c:	84 60       	ori	r24, 0x04	; 4
    141e:	a8 2e       	mov	r10, r24
			}
			if(atLimitB1())
    1420:	0e 94 b7 03 	call	0x76e	; 0x76e <atLimitB1>
    1424:	88 23       	and	r24, r24
    1426:	19 f0       	breq	.+6      	; 0x142e <main+0x17a>
			{
				outMask |= 0x08;
    1428:	9a 2d       	mov	r25, r10
    142a:	98 60       	ori	r25, 0x08	; 8
    142c:	a9 2e       	mov	r10, r25
			}
			led_dataOut(outMask);
    142e:	8a 2d       	mov	r24, r10
    1430:	0e 94 98 03 	call	0x730	; 0x730 <led_dataOut>
    1434:	04 c0       	rjmp	.+8      	; 0x143e <main+0x18a>
		}
		else
		{
				displayCommands(targetVelocity0, targetVelocity1);
    1436:	b6 01       	movw	r22, r12
    1438:	c7 01       	movw	r24, r14
    143a:	0e 94 28 09 	call	0x1250	; 0x1250 <displayCommands>
		}
		

		returnPacket.cmd = 66;
    143e:	b9 82       	std	Y+1, r11	; 0x01
		returnPacket.buffer[0] = (int8_t)qdec_vel0();
    1440:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <qdec_vel0>
    1444:	0e 94 28 0b 	call	0x1650	; 0x1650 <__fixsfsi>
    1448:	6a 83       	std	Y+2, r22	; 0x02
		returnPacket.buffer[1] = (int8_t)qdec_vel1();
    144a:	0e 94 56 05 	call	0xaac	; 0xaac <qdec_vel1>
    144e:	0e 94 28 0b 	call	0x1650	; 0x1650 <__fixsfsi>
    1452:	6b 83       	std	Y+3, r22	; 0x03
		i2cAPI_setReturnPacket(&returnPacket, 2);
    1454:	62 e0       	ldi	r22, 0x02	; 2
    1456:	ce 01       	movw	r24, r28
    1458:	01 96       	adiw	r24, 0x01	; 1
    145a:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <i2cAPI_setReturnPacket>



		/// LED Control ///
		delayCounter--;
    145e:	11 50       	subi	r17, 0x01	; 1
		if(delayCounter == 0)
    1460:	19 f4       	brne	.+6      	; 0x1468 <main+0x1b4>
		{
			delayCounter = 25;
			led_aliveToggle();
    1462:	0e 94 94 03 	call	0x728	; 0x728 <led_aliveToggle>

		/// LED Control ///
		delayCounter--;
		if(delayCounter == 0)
		{
			delayCounter = 25;
    1466:	19 e1       	ldi	r17, 0x19	; 25
			led_aliveToggle();
		}

		if(cmdCounter != 0)
    1468:	00 23       	and	r16, r16
    146a:	21 f0       	breq	.+8      	; 0x1474 <main+0x1c0>
		{
			cmdCounter--;
    146c:	01 50       	subi	r16, 0x01	; 1
			if(cmdCounter == 0)
    146e:	11 f4       	brne	.+4      	; 0x1474 <main+0x1c0>
			{
				led_cmdOff();
    1470:	0e 94 88 03 	call	0x710	; 0x710 <led_cmdOff>
    1474:	2f ef       	ldi	r18, 0xFF	; 255
    1476:	87 ee       	ldi	r24, 0xE7	; 231
    1478:	93 e0       	ldi	r25, 0x03	; 3
    147a:	21 50       	subi	r18, 0x01	; 1
    147c:	80 40       	sbci	r24, 0x00	; 0
    147e:	90 40       	sbci	r25, 0x00	; 0
    1480:	e1 f7       	brne	.-8      	; 0x147a <main+0x1c6>
    1482:	00 c0       	rjmp	.+0      	; 0x1484 <main+0x1d0>
    1484:	00 00       	nop
    1486:	74 cf       	rjmp	.-280    	; 0x1370 <main+0xbc>

00001488 <__subsf3>:
    1488:	50 58       	subi	r21, 0x80	; 128

0000148a <__addsf3>:
    148a:	bb 27       	eor	r27, r27
    148c:	aa 27       	eor	r26, r26
    148e:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <__addsf3x>
    1492:	0c 94 d6 0b 	jmp	0x17ac	; 0x17ac <__fp_round>
    1496:	0e 94 c8 0b 	call	0x1790	; 0x1790 <__fp_pscA>
    149a:	38 f0       	brcs	.+14     	; 0x14aa <__addsf3+0x20>
    149c:	0e 94 cf 0b 	call	0x179e	; 0x179e <__fp_pscB>
    14a0:	20 f0       	brcs	.+8      	; 0x14aa <__addsf3+0x20>
    14a2:	39 f4       	brne	.+14     	; 0x14b2 <__addsf3+0x28>
    14a4:	9f 3f       	cpi	r25, 0xFF	; 255
    14a6:	19 f4       	brne	.+6      	; 0x14ae <__addsf3+0x24>
    14a8:	26 f4       	brtc	.+8      	; 0x14b2 <__addsf3+0x28>
    14aa:	0c 94 c5 0b 	jmp	0x178a	; 0x178a <__fp_nan>
    14ae:	0e f4       	brtc	.+2      	; 0x14b2 <__addsf3+0x28>
    14b0:	e0 95       	com	r30
    14b2:	e7 fb       	bst	r30, 7
    14b4:	0c 94 bf 0b 	jmp	0x177e	; 0x177e <__fp_inf>

000014b8 <__addsf3x>:
    14b8:	e9 2f       	mov	r30, r25
    14ba:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <__fp_split3>
    14be:	58 f3       	brcs	.-42     	; 0x1496 <__addsf3+0xc>
    14c0:	ba 17       	cp	r27, r26
    14c2:	62 07       	cpc	r22, r18
    14c4:	73 07       	cpc	r23, r19
    14c6:	84 07       	cpc	r24, r20
    14c8:	95 07       	cpc	r25, r21
    14ca:	20 f0       	brcs	.+8      	; 0x14d4 <__addsf3x+0x1c>
    14cc:	79 f4       	brne	.+30     	; 0x14ec <__addsf3x+0x34>
    14ce:	a6 f5       	brtc	.+104    	; 0x1538 <__addsf3x+0x80>
    14d0:	0c 94 09 0c 	jmp	0x1812	; 0x1812 <__fp_zero>
    14d4:	0e f4       	brtc	.+2      	; 0x14d8 <__addsf3x+0x20>
    14d6:	e0 95       	com	r30
    14d8:	0b 2e       	mov	r0, r27
    14da:	ba 2f       	mov	r27, r26
    14dc:	a0 2d       	mov	r26, r0
    14de:	0b 01       	movw	r0, r22
    14e0:	b9 01       	movw	r22, r18
    14e2:	90 01       	movw	r18, r0
    14e4:	0c 01       	movw	r0, r24
    14e6:	ca 01       	movw	r24, r20
    14e8:	a0 01       	movw	r20, r0
    14ea:	11 24       	eor	r1, r1
    14ec:	ff 27       	eor	r31, r31
    14ee:	59 1b       	sub	r21, r25
    14f0:	99 f0       	breq	.+38     	; 0x1518 <__addsf3x+0x60>
    14f2:	59 3f       	cpi	r21, 0xF9	; 249
    14f4:	50 f4       	brcc	.+20     	; 0x150a <__addsf3x+0x52>
    14f6:	50 3e       	cpi	r21, 0xE0	; 224
    14f8:	68 f1       	brcs	.+90     	; 0x1554 <__addsf3x+0x9c>
    14fa:	1a 16       	cp	r1, r26
    14fc:	f0 40       	sbci	r31, 0x00	; 0
    14fe:	a2 2f       	mov	r26, r18
    1500:	23 2f       	mov	r18, r19
    1502:	34 2f       	mov	r19, r20
    1504:	44 27       	eor	r20, r20
    1506:	58 5f       	subi	r21, 0xF8	; 248
    1508:	f3 cf       	rjmp	.-26     	; 0x14f0 <__addsf3x+0x38>
    150a:	46 95       	lsr	r20
    150c:	37 95       	ror	r19
    150e:	27 95       	ror	r18
    1510:	a7 95       	ror	r26
    1512:	f0 40       	sbci	r31, 0x00	; 0
    1514:	53 95       	inc	r21
    1516:	c9 f7       	brne	.-14     	; 0x150a <__addsf3x+0x52>
    1518:	7e f4       	brtc	.+30     	; 0x1538 <__addsf3x+0x80>
    151a:	1f 16       	cp	r1, r31
    151c:	ba 0b       	sbc	r27, r26
    151e:	62 0b       	sbc	r22, r18
    1520:	73 0b       	sbc	r23, r19
    1522:	84 0b       	sbc	r24, r20
    1524:	ba f0       	brmi	.+46     	; 0x1554 <__addsf3x+0x9c>
    1526:	91 50       	subi	r25, 0x01	; 1
    1528:	a1 f0       	breq	.+40     	; 0x1552 <__addsf3x+0x9a>
    152a:	ff 0f       	add	r31, r31
    152c:	bb 1f       	adc	r27, r27
    152e:	66 1f       	adc	r22, r22
    1530:	77 1f       	adc	r23, r23
    1532:	88 1f       	adc	r24, r24
    1534:	c2 f7       	brpl	.-16     	; 0x1526 <__addsf3x+0x6e>
    1536:	0e c0       	rjmp	.+28     	; 0x1554 <__addsf3x+0x9c>
    1538:	ba 0f       	add	r27, r26
    153a:	62 1f       	adc	r22, r18
    153c:	73 1f       	adc	r23, r19
    153e:	84 1f       	adc	r24, r20
    1540:	48 f4       	brcc	.+18     	; 0x1554 <__addsf3x+0x9c>
    1542:	87 95       	ror	r24
    1544:	77 95       	ror	r23
    1546:	67 95       	ror	r22
    1548:	b7 95       	ror	r27
    154a:	f7 95       	ror	r31
    154c:	9e 3f       	cpi	r25, 0xFE	; 254
    154e:	08 f0       	brcs	.+2      	; 0x1552 <__addsf3x+0x9a>
    1550:	b0 cf       	rjmp	.-160    	; 0x14b2 <__addsf3+0x28>
    1552:	93 95       	inc	r25
    1554:	88 0f       	add	r24, r24
    1556:	08 f0       	brcs	.+2      	; 0x155a <__addsf3x+0xa2>
    1558:	99 27       	eor	r25, r25
    155a:	ee 0f       	add	r30, r30
    155c:	97 95       	ror	r25
    155e:	87 95       	ror	r24
    1560:	08 95       	ret

00001562 <__cmpsf2>:
    1562:	0e 94 9b 0b 	call	0x1736	; 0x1736 <__fp_cmp>
    1566:	08 f4       	brcc	.+2      	; 0x156a <__cmpsf2+0x8>
    1568:	81 e0       	ldi	r24, 0x01	; 1
    156a:	08 95       	ret

0000156c <__divsf3>:
    156c:	0e 94 ca 0a 	call	0x1594	; 0x1594 <__divsf3x>
    1570:	0c 94 d6 0b 	jmp	0x17ac	; 0x17ac <__fp_round>
    1574:	0e 94 cf 0b 	call	0x179e	; 0x179e <__fp_pscB>
    1578:	58 f0       	brcs	.+22     	; 0x1590 <__divsf3+0x24>
    157a:	0e 94 c8 0b 	call	0x1790	; 0x1790 <__fp_pscA>
    157e:	40 f0       	brcs	.+16     	; 0x1590 <__divsf3+0x24>
    1580:	29 f4       	brne	.+10     	; 0x158c <__divsf3+0x20>
    1582:	5f 3f       	cpi	r21, 0xFF	; 255
    1584:	29 f0       	breq	.+10     	; 0x1590 <__divsf3+0x24>
    1586:	0c 94 bf 0b 	jmp	0x177e	; 0x177e <__fp_inf>
    158a:	51 11       	cpse	r21, r1
    158c:	0c 94 0a 0c 	jmp	0x1814	; 0x1814 <__fp_szero>
    1590:	0c 94 c5 0b 	jmp	0x178a	; 0x178a <__fp_nan>

00001594 <__divsf3x>:
    1594:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <__fp_split3>
    1598:	68 f3       	brcs	.-38     	; 0x1574 <__divsf3+0x8>

0000159a <__divsf3_pse>:
    159a:	99 23       	and	r25, r25
    159c:	b1 f3       	breq	.-20     	; 0x158a <__divsf3+0x1e>
    159e:	55 23       	and	r21, r21
    15a0:	91 f3       	breq	.-28     	; 0x1586 <__divsf3+0x1a>
    15a2:	95 1b       	sub	r25, r21
    15a4:	55 0b       	sbc	r21, r21
    15a6:	bb 27       	eor	r27, r27
    15a8:	aa 27       	eor	r26, r26
    15aa:	62 17       	cp	r22, r18
    15ac:	73 07       	cpc	r23, r19
    15ae:	84 07       	cpc	r24, r20
    15b0:	38 f0       	brcs	.+14     	; 0x15c0 <__divsf3_pse+0x26>
    15b2:	9f 5f       	subi	r25, 0xFF	; 255
    15b4:	5f 4f       	sbci	r21, 0xFF	; 255
    15b6:	22 0f       	add	r18, r18
    15b8:	33 1f       	adc	r19, r19
    15ba:	44 1f       	adc	r20, r20
    15bc:	aa 1f       	adc	r26, r26
    15be:	a9 f3       	breq	.-22     	; 0x15aa <__divsf3_pse+0x10>
    15c0:	35 d0       	rcall	.+106    	; 0x162c <__divsf3_pse+0x92>
    15c2:	0e 2e       	mov	r0, r30
    15c4:	3a f0       	brmi	.+14     	; 0x15d4 <__divsf3_pse+0x3a>
    15c6:	e0 e8       	ldi	r30, 0x80	; 128
    15c8:	32 d0       	rcall	.+100    	; 0x162e <__divsf3_pse+0x94>
    15ca:	91 50       	subi	r25, 0x01	; 1
    15cc:	50 40       	sbci	r21, 0x00	; 0
    15ce:	e6 95       	lsr	r30
    15d0:	00 1c       	adc	r0, r0
    15d2:	ca f7       	brpl	.-14     	; 0x15c6 <__divsf3_pse+0x2c>
    15d4:	2b d0       	rcall	.+86     	; 0x162c <__divsf3_pse+0x92>
    15d6:	fe 2f       	mov	r31, r30
    15d8:	29 d0       	rcall	.+82     	; 0x162c <__divsf3_pse+0x92>
    15da:	66 0f       	add	r22, r22
    15dc:	77 1f       	adc	r23, r23
    15de:	88 1f       	adc	r24, r24
    15e0:	bb 1f       	adc	r27, r27
    15e2:	26 17       	cp	r18, r22
    15e4:	37 07       	cpc	r19, r23
    15e6:	48 07       	cpc	r20, r24
    15e8:	ab 07       	cpc	r26, r27
    15ea:	b0 e8       	ldi	r27, 0x80	; 128
    15ec:	09 f0       	breq	.+2      	; 0x15f0 <__divsf3_pse+0x56>
    15ee:	bb 0b       	sbc	r27, r27
    15f0:	80 2d       	mov	r24, r0
    15f2:	bf 01       	movw	r22, r30
    15f4:	ff 27       	eor	r31, r31
    15f6:	93 58       	subi	r25, 0x83	; 131
    15f8:	5f 4f       	sbci	r21, 0xFF	; 255
    15fa:	3a f0       	brmi	.+14     	; 0x160a <__divsf3_pse+0x70>
    15fc:	9e 3f       	cpi	r25, 0xFE	; 254
    15fe:	51 05       	cpc	r21, r1
    1600:	78 f0       	brcs	.+30     	; 0x1620 <__divsf3_pse+0x86>
    1602:	0c 94 bf 0b 	jmp	0x177e	; 0x177e <__fp_inf>
    1606:	0c 94 0a 0c 	jmp	0x1814	; 0x1814 <__fp_szero>
    160a:	5f 3f       	cpi	r21, 0xFF	; 255
    160c:	e4 f3       	brlt	.-8      	; 0x1606 <__divsf3_pse+0x6c>
    160e:	98 3e       	cpi	r25, 0xE8	; 232
    1610:	d4 f3       	brlt	.-12     	; 0x1606 <__divsf3_pse+0x6c>
    1612:	86 95       	lsr	r24
    1614:	77 95       	ror	r23
    1616:	67 95       	ror	r22
    1618:	b7 95       	ror	r27
    161a:	f7 95       	ror	r31
    161c:	9f 5f       	subi	r25, 0xFF	; 255
    161e:	c9 f7       	brne	.-14     	; 0x1612 <__divsf3_pse+0x78>
    1620:	88 0f       	add	r24, r24
    1622:	91 1d       	adc	r25, r1
    1624:	96 95       	lsr	r25
    1626:	87 95       	ror	r24
    1628:	97 f9       	bld	r25, 7
    162a:	08 95       	ret
    162c:	e1 e0       	ldi	r30, 0x01	; 1
    162e:	66 0f       	add	r22, r22
    1630:	77 1f       	adc	r23, r23
    1632:	88 1f       	adc	r24, r24
    1634:	bb 1f       	adc	r27, r27
    1636:	62 17       	cp	r22, r18
    1638:	73 07       	cpc	r23, r19
    163a:	84 07       	cpc	r24, r20
    163c:	ba 07       	cpc	r27, r26
    163e:	20 f0       	brcs	.+8      	; 0x1648 <__divsf3_pse+0xae>
    1640:	62 1b       	sub	r22, r18
    1642:	73 0b       	sbc	r23, r19
    1644:	84 0b       	sbc	r24, r20
    1646:	ba 0b       	sbc	r27, r26
    1648:	ee 1f       	adc	r30, r30
    164a:	88 f7       	brcc	.-30     	; 0x162e <__divsf3_pse+0x94>
    164c:	e0 95       	com	r30
    164e:	08 95       	ret

00001650 <__fixsfsi>:
    1650:	0e 94 2f 0b 	call	0x165e	; 0x165e <__fixunssfsi>
    1654:	68 94       	set
    1656:	b1 11       	cpse	r27, r1
    1658:	0c 94 0a 0c 	jmp	0x1814	; 0x1814 <__fp_szero>
    165c:	08 95       	ret

0000165e <__fixunssfsi>:
    165e:	0e 94 ef 0b 	call	0x17de	; 0x17de <__fp_splitA>
    1662:	88 f0       	brcs	.+34     	; 0x1686 <__fixunssfsi+0x28>
    1664:	9f 57       	subi	r25, 0x7F	; 127
    1666:	98 f0       	brcs	.+38     	; 0x168e <__fixunssfsi+0x30>
    1668:	b9 2f       	mov	r27, r25
    166a:	99 27       	eor	r25, r25
    166c:	b7 51       	subi	r27, 0x17	; 23
    166e:	b0 f0       	brcs	.+44     	; 0x169c <__fixunssfsi+0x3e>
    1670:	e1 f0       	breq	.+56     	; 0x16aa <__fixunssfsi+0x4c>
    1672:	66 0f       	add	r22, r22
    1674:	77 1f       	adc	r23, r23
    1676:	88 1f       	adc	r24, r24
    1678:	99 1f       	adc	r25, r25
    167a:	1a f0       	brmi	.+6      	; 0x1682 <__fixunssfsi+0x24>
    167c:	ba 95       	dec	r27
    167e:	c9 f7       	brne	.-14     	; 0x1672 <__fixunssfsi+0x14>
    1680:	14 c0       	rjmp	.+40     	; 0x16aa <__fixunssfsi+0x4c>
    1682:	b1 30       	cpi	r27, 0x01	; 1
    1684:	91 f0       	breq	.+36     	; 0x16aa <__fixunssfsi+0x4c>
    1686:	0e 94 09 0c 	call	0x1812	; 0x1812 <__fp_zero>
    168a:	b1 e0       	ldi	r27, 0x01	; 1
    168c:	08 95       	ret
    168e:	0c 94 09 0c 	jmp	0x1812	; 0x1812 <__fp_zero>
    1692:	67 2f       	mov	r22, r23
    1694:	78 2f       	mov	r23, r24
    1696:	88 27       	eor	r24, r24
    1698:	b8 5f       	subi	r27, 0xF8	; 248
    169a:	39 f0       	breq	.+14     	; 0x16aa <__fixunssfsi+0x4c>
    169c:	b9 3f       	cpi	r27, 0xF9	; 249
    169e:	cc f3       	brlt	.-14     	; 0x1692 <__fixunssfsi+0x34>
    16a0:	86 95       	lsr	r24
    16a2:	77 95       	ror	r23
    16a4:	67 95       	ror	r22
    16a6:	b3 95       	inc	r27
    16a8:	d9 f7       	brne	.-10     	; 0x16a0 <__fixunssfsi+0x42>
    16aa:	3e f4       	brtc	.+14     	; 0x16ba <__fixunssfsi+0x5c>
    16ac:	90 95       	com	r25
    16ae:	80 95       	com	r24
    16b0:	70 95       	com	r23
    16b2:	61 95       	neg	r22
    16b4:	7f 4f       	sbci	r23, 0xFF	; 255
    16b6:	8f 4f       	sbci	r24, 0xFF	; 255
    16b8:	9f 4f       	sbci	r25, 0xFF	; 255
    16ba:	08 95       	ret

000016bc <__floatunsisf>:
    16bc:	e8 94       	clt
    16be:	09 c0       	rjmp	.+18     	; 0x16d2 <__floatsisf+0x12>

000016c0 <__floatsisf>:
    16c0:	97 fb       	bst	r25, 7
    16c2:	3e f4       	brtc	.+14     	; 0x16d2 <__floatsisf+0x12>
    16c4:	90 95       	com	r25
    16c6:	80 95       	com	r24
    16c8:	70 95       	com	r23
    16ca:	61 95       	neg	r22
    16cc:	7f 4f       	sbci	r23, 0xFF	; 255
    16ce:	8f 4f       	sbci	r24, 0xFF	; 255
    16d0:	9f 4f       	sbci	r25, 0xFF	; 255
    16d2:	99 23       	and	r25, r25
    16d4:	a9 f0       	breq	.+42     	; 0x1700 <__floatsisf+0x40>
    16d6:	f9 2f       	mov	r31, r25
    16d8:	96 e9       	ldi	r25, 0x96	; 150
    16da:	bb 27       	eor	r27, r27
    16dc:	93 95       	inc	r25
    16de:	f6 95       	lsr	r31
    16e0:	87 95       	ror	r24
    16e2:	77 95       	ror	r23
    16e4:	67 95       	ror	r22
    16e6:	b7 95       	ror	r27
    16e8:	f1 11       	cpse	r31, r1
    16ea:	f8 cf       	rjmp	.-16     	; 0x16dc <__floatsisf+0x1c>
    16ec:	fa f4       	brpl	.+62     	; 0x172c <__floatsisf+0x6c>
    16ee:	bb 0f       	add	r27, r27
    16f0:	11 f4       	brne	.+4      	; 0x16f6 <__floatsisf+0x36>
    16f2:	60 ff       	sbrs	r22, 0
    16f4:	1b c0       	rjmp	.+54     	; 0x172c <__floatsisf+0x6c>
    16f6:	6f 5f       	subi	r22, 0xFF	; 255
    16f8:	7f 4f       	sbci	r23, 0xFF	; 255
    16fa:	8f 4f       	sbci	r24, 0xFF	; 255
    16fc:	9f 4f       	sbci	r25, 0xFF	; 255
    16fe:	16 c0       	rjmp	.+44     	; 0x172c <__floatsisf+0x6c>
    1700:	88 23       	and	r24, r24
    1702:	11 f0       	breq	.+4      	; 0x1708 <__floatsisf+0x48>
    1704:	96 e9       	ldi	r25, 0x96	; 150
    1706:	11 c0       	rjmp	.+34     	; 0x172a <__floatsisf+0x6a>
    1708:	77 23       	and	r23, r23
    170a:	21 f0       	breq	.+8      	; 0x1714 <__floatsisf+0x54>
    170c:	9e e8       	ldi	r25, 0x8E	; 142
    170e:	87 2f       	mov	r24, r23
    1710:	76 2f       	mov	r23, r22
    1712:	05 c0       	rjmp	.+10     	; 0x171e <__floatsisf+0x5e>
    1714:	66 23       	and	r22, r22
    1716:	71 f0       	breq	.+28     	; 0x1734 <__floatsisf+0x74>
    1718:	96 e8       	ldi	r25, 0x86	; 134
    171a:	86 2f       	mov	r24, r22
    171c:	70 e0       	ldi	r23, 0x00	; 0
    171e:	60 e0       	ldi	r22, 0x00	; 0
    1720:	2a f0       	brmi	.+10     	; 0x172c <__floatsisf+0x6c>
    1722:	9a 95       	dec	r25
    1724:	66 0f       	add	r22, r22
    1726:	77 1f       	adc	r23, r23
    1728:	88 1f       	adc	r24, r24
    172a:	da f7       	brpl	.-10     	; 0x1722 <__floatsisf+0x62>
    172c:	88 0f       	add	r24, r24
    172e:	96 95       	lsr	r25
    1730:	87 95       	ror	r24
    1732:	97 f9       	bld	r25, 7
    1734:	08 95       	ret

00001736 <__fp_cmp>:
    1736:	99 0f       	add	r25, r25
    1738:	00 08       	sbc	r0, r0
    173a:	55 0f       	add	r21, r21
    173c:	aa 0b       	sbc	r26, r26
    173e:	e0 e8       	ldi	r30, 0x80	; 128
    1740:	fe ef       	ldi	r31, 0xFE	; 254
    1742:	16 16       	cp	r1, r22
    1744:	17 06       	cpc	r1, r23
    1746:	e8 07       	cpc	r30, r24
    1748:	f9 07       	cpc	r31, r25
    174a:	c0 f0       	brcs	.+48     	; 0x177c <__fp_cmp+0x46>
    174c:	12 16       	cp	r1, r18
    174e:	13 06       	cpc	r1, r19
    1750:	e4 07       	cpc	r30, r20
    1752:	f5 07       	cpc	r31, r21
    1754:	98 f0       	brcs	.+38     	; 0x177c <__fp_cmp+0x46>
    1756:	62 1b       	sub	r22, r18
    1758:	73 0b       	sbc	r23, r19
    175a:	84 0b       	sbc	r24, r20
    175c:	95 0b       	sbc	r25, r21
    175e:	39 f4       	brne	.+14     	; 0x176e <__fp_cmp+0x38>
    1760:	0a 26       	eor	r0, r26
    1762:	61 f0       	breq	.+24     	; 0x177c <__fp_cmp+0x46>
    1764:	23 2b       	or	r18, r19
    1766:	24 2b       	or	r18, r20
    1768:	25 2b       	or	r18, r21
    176a:	21 f4       	brne	.+8      	; 0x1774 <__fp_cmp+0x3e>
    176c:	08 95       	ret
    176e:	0a 26       	eor	r0, r26
    1770:	09 f4       	brne	.+2      	; 0x1774 <__fp_cmp+0x3e>
    1772:	a1 40       	sbci	r26, 0x01	; 1
    1774:	a6 95       	lsr	r26
    1776:	8f ef       	ldi	r24, 0xFF	; 255
    1778:	81 1d       	adc	r24, r1
    177a:	81 1d       	adc	r24, r1
    177c:	08 95       	ret

0000177e <__fp_inf>:
    177e:	97 f9       	bld	r25, 7
    1780:	9f 67       	ori	r25, 0x7F	; 127
    1782:	80 e8       	ldi	r24, 0x80	; 128
    1784:	70 e0       	ldi	r23, 0x00	; 0
    1786:	60 e0       	ldi	r22, 0x00	; 0
    1788:	08 95       	ret

0000178a <__fp_nan>:
    178a:	9f ef       	ldi	r25, 0xFF	; 255
    178c:	80 ec       	ldi	r24, 0xC0	; 192
    178e:	08 95       	ret

00001790 <__fp_pscA>:
    1790:	00 24       	eor	r0, r0
    1792:	0a 94       	dec	r0
    1794:	16 16       	cp	r1, r22
    1796:	17 06       	cpc	r1, r23
    1798:	18 06       	cpc	r1, r24
    179a:	09 06       	cpc	r0, r25
    179c:	08 95       	ret

0000179e <__fp_pscB>:
    179e:	00 24       	eor	r0, r0
    17a0:	0a 94       	dec	r0
    17a2:	12 16       	cp	r1, r18
    17a4:	13 06       	cpc	r1, r19
    17a6:	14 06       	cpc	r1, r20
    17a8:	05 06       	cpc	r0, r21
    17aa:	08 95       	ret

000017ac <__fp_round>:
    17ac:	09 2e       	mov	r0, r25
    17ae:	03 94       	inc	r0
    17b0:	00 0c       	add	r0, r0
    17b2:	11 f4       	brne	.+4      	; 0x17b8 <__fp_round+0xc>
    17b4:	88 23       	and	r24, r24
    17b6:	52 f0       	brmi	.+20     	; 0x17cc <__fp_round+0x20>
    17b8:	bb 0f       	add	r27, r27
    17ba:	40 f4       	brcc	.+16     	; 0x17cc <__fp_round+0x20>
    17bc:	bf 2b       	or	r27, r31
    17be:	11 f4       	brne	.+4      	; 0x17c4 <__fp_round+0x18>
    17c0:	60 ff       	sbrs	r22, 0
    17c2:	04 c0       	rjmp	.+8      	; 0x17cc <__fp_round+0x20>
    17c4:	6f 5f       	subi	r22, 0xFF	; 255
    17c6:	7f 4f       	sbci	r23, 0xFF	; 255
    17c8:	8f 4f       	sbci	r24, 0xFF	; 255
    17ca:	9f 4f       	sbci	r25, 0xFF	; 255
    17cc:	08 95       	ret

000017ce <__fp_split3>:
    17ce:	57 fd       	sbrc	r21, 7
    17d0:	90 58       	subi	r25, 0x80	; 128
    17d2:	44 0f       	add	r20, r20
    17d4:	55 1f       	adc	r21, r21
    17d6:	59 f0       	breq	.+22     	; 0x17ee <__fp_splitA+0x10>
    17d8:	5f 3f       	cpi	r21, 0xFF	; 255
    17da:	71 f0       	breq	.+28     	; 0x17f8 <__fp_splitA+0x1a>
    17dc:	47 95       	ror	r20

000017de <__fp_splitA>:
    17de:	88 0f       	add	r24, r24
    17e0:	97 fb       	bst	r25, 7
    17e2:	99 1f       	adc	r25, r25
    17e4:	61 f0       	breq	.+24     	; 0x17fe <__fp_splitA+0x20>
    17e6:	9f 3f       	cpi	r25, 0xFF	; 255
    17e8:	79 f0       	breq	.+30     	; 0x1808 <__fp_splitA+0x2a>
    17ea:	87 95       	ror	r24
    17ec:	08 95       	ret
    17ee:	12 16       	cp	r1, r18
    17f0:	13 06       	cpc	r1, r19
    17f2:	14 06       	cpc	r1, r20
    17f4:	55 1f       	adc	r21, r21
    17f6:	f2 cf       	rjmp	.-28     	; 0x17dc <__fp_split3+0xe>
    17f8:	46 95       	lsr	r20
    17fa:	f1 df       	rcall	.-30     	; 0x17de <__fp_splitA>
    17fc:	08 c0       	rjmp	.+16     	; 0x180e <__fp_splitA+0x30>
    17fe:	16 16       	cp	r1, r22
    1800:	17 06       	cpc	r1, r23
    1802:	18 06       	cpc	r1, r24
    1804:	99 1f       	adc	r25, r25
    1806:	f1 cf       	rjmp	.-30     	; 0x17ea <__fp_splitA+0xc>
    1808:	86 95       	lsr	r24
    180a:	71 05       	cpc	r23, r1
    180c:	61 05       	cpc	r22, r1
    180e:	08 94       	sec
    1810:	08 95       	ret

00001812 <__fp_zero>:
    1812:	e8 94       	clt

00001814 <__fp_szero>:
    1814:	bb 27       	eor	r27, r27
    1816:	66 27       	eor	r22, r22
    1818:	77 27       	eor	r23, r23
    181a:	cb 01       	movw	r24, r22
    181c:	97 f9       	bld	r25, 7
    181e:	08 95       	ret

00001820 <__gesf2>:
    1820:	0e 94 9b 0b 	call	0x1736	; 0x1736 <__fp_cmp>
    1824:	08 f4       	brcc	.+2      	; 0x1828 <__gesf2+0x8>
    1826:	8f ef       	ldi	r24, 0xFF	; 255
    1828:	08 95       	ret

0000182a <__mulsf3>:
    182a:	0e 94 28 0c 	call	0x1850	; 0x1850 <__mulsf3x>
    182e:	0c 94 d6 0b 	jmp	0x17ac	; 0x17ac <__fp_round>
    1832:	0e 94 c8 0b 	call	0x1790	; 0x1790 <__fp_pscA>
    1836:	38 f0       	brcs	.+14     	; 0x1846 <__mulsf3+0x1c>
    1838:	0e 94 cf 0b 	call	0x179e	; 0x179e <__fp_pscB>
    183c:	20 f0       	brcs	.+8      	; 0x1846 <__mulsf3+0x1c>
    183e:	95 23       	and	r25, r21
    1840:	11 f0       	breq	.+4      	; 0x1846 <__mulsf3+0x1c>
    1842:	0c 94 bf 0b 	jmp	0x177e	; 0x177e <__fp_inf>
    1846:	0c 94 c5 0b 	jmp	0x178a	; 0x178a <__fp_nan>
    184a:	11 24       	eor	r1, r1
    184c:	0c 94 0a 0c 	jmp	0x1814	; 0x1814 <__fp_szero>

00001850 <__mulsf3x>:
    1850:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <__fp_split3>
    1854:	70 f3       	brcs	.-36     	; 0x1832 <__mulsf3+0x8>

00001856 <__mulsf3_pse>:
    1856:	95 9f       	mul	r25, r21
    1858:	c1 f3       	breq	.-16     	; 0x184a <__mulsf3+0x20>
    185a:	95 0f       	add	r25, r21
    185c:	50 e0       	ldi	r21, 0x00	; 0
    185e:	55 1f       	adc	r21, r21
    1860:	62 9f       	mul	r22, r18
    1862:	f0 01       	movw	r30, r0
    1864:	72 9f       	mul	r23, r18
    1866:	bb 27       	eor	r27, r27
    1868:	f0 0d       	add	r31, r0
    186a:	b1 1d       	adc	r27, r1
    186c:	63 9f       	mul	r22, r19
    186e:	aa 27       	eor	r26, r26
    1870:	f0 0d       	add	r31, r0
    1872:	b1 1d       	adc	r27, r1
    1874:	aa 1f       	adc	r26, r26
    1876:	64 9f       	mul	r22, r20
    1878:	66 27       	eor	r22, r22
    187a:	b0 0d       	add	r27, r0
    187c:	a1 1d       	adc	r26, r1
    187e:	66 1f       	adc	r22, r22
    1880:	82 9f       	mul	r24, r18
    1882:	22 27       	eor	r18, r18
    1884:	b0 0d       	add	r27, r0
    1886:	a1 1d       	adc	r26, r1
    1888:	62 1f       	adc	r22, r18
    188a:	73 9f       	mul	r23, r19
    188c:	b0 0d       	add	r27, r0
    188e:	a1 1d       	adc	r26, r1
    1890:	62 1f       	adc	r22, r18
    1892:	83 9f       	mul	r24, r19
    1894:	a0 0d       	add	r26, r0
    1896:	61 1d       	adc	r22, r1
    1898:	22 1f       	adc	r18, r18
    189a:	74 9f       	mul	r23, r20
    189c:	33 27       	eor	r19, r19
    189e:	a0 0d       	add	r26, r0
    18a0:	61 1d       	adc	r22, r1
    18a2:	23 1f       	adc	r18, r19
    18a4:	84 9f       	mul	r24, r20
    18a6:	60 0d       	add	r22, r0
    18a8:	21 1d       	adc	r18, r1
    18aa:	82 2f       	mov	r24, r18
    18ac:	76 2f       	mov	r23, r22
    18ae:	6a 2f       	mov	r22, r26
    18b0:	11 24       	eor	r1, r1
    18b2:	9f 57       	subi	r25, 0x7F	; 127
    18b4:	50 40       	sbci	r21, 0x00	; 0
    18b6:	9a f0       	brmi	.+38     	; 0x18de <__mulsf3_pse+0x88>
    18b8:	f1 f0       	breq	.+60     	; 0x18f6 <__mulsf3_pse+0xa0>
    18ba:	88 23       	and	r24, r24
    18bc:	4a f0       	brmi	.+18     	; 0x18d0 <__mulsf3_pse+0x7a>
    18be:	ee 0f       	add	r30, r30
    18c0:	ff 1f       	adc	r31, r31
    18c2:	bb 1f       	adc	r27, r27
    18c4:	66 1f       	adc	r22, r22
    18c6:	77 1f       	adc	r23, r23
    18c8:	88 1f       	adc	r24, r24
    18ca:	91 50       	subi	r25, 0x01	; 1
    18cc:	50 40       	sbci	r21, 0x00	; 0
    18ce:	a9 f7       	brne	.-22     	; 0x18ba <__mulsf3_pse+0x64>
    18d0:	9e 3f       	cpi	r25, 0xFE	; 254
    18d2:	51 05       	cpc	r21, r1
    18d4:	80 f0       	brcs	.+32     	; 0x18f6 <__mulsf3_pse+0xa0>
    18d6:	0c 94 bf 0b 	jmp	0x177e	; 0x177e <__fp_inf>
    18da:	0c 94 0a 0c 	jmp	0x1814	; 0x1814 <__fp_szero>
    18de:	5f 3f       	cpi	r21, 0xFF	; 255
    18e0:	e4 f3       	brlt	.-8      	; 0x18da <__mulsf3_pse+0x84>
    18e2:	98 3e       	cpi	r25, 0xE8	; 232
    18e4:	d4 f3       	brlt	.-12     	; 0x18da <__mulsf3_pse+0x84>
    18e6:	86 95       	lsr	r24
    18e8:	77 95       	ror	r23
    18ea:	67 95       	ror	r22
    18ec:	b7 95       	ror	r27
    18ee:	f7 95       	ror	r31
    18f0:	e7 95       	ror	r30
    18f2:	9f 5f       	subi	r25, 0xFF	; 255
    18f4:	c1 f7       	brne	.-16     	; 0x18e6 <__mulsf3_pse+0x90>
    18f6:	fe 2b       	or	r31, r30
    18f8:	88 0f       	add	r24, r24
    18fa:	91 1d       	adc	r25, r1
    18fc:	96 95       	lsr	r25
    18fe:	87 95       	ror	r24
    1900:	97 f9       	bld	r25, 7
    1902:	08 95       	ret

00001904 <_exit>:
    1904:	f8 94       	cli

00001906 <__stop_program>:
    1906:	ff cf       	rjmp	.-2      	; 0x1906 <__stop_program>
